
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model cases
 * 
 */
export type cases = $Result.DefaultSelection<Prisma.$casesPayload>
/**
 * Model clients
 * 
 */
export type clients = $Result.DefaultSelection<Prisma.$clientsPayload>
/**
 * Model consults
 * 
 */
export type consults = $Result.DefaultSelection<Prisma.$consultsPayload>
/**
 * Model users
 * 
 */
export type users = $Result.DefaultSelection<Prisma.$usersPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Cases
 * const cases = await prisma.cases.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Cases
   * const cases = await prisma.cases.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.cases`: Exposes CRUD operations for the **cases** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Cases
    * const cases = await prisma.cases.findMany()
    * ```
    */
  get cases(): Prisma.casesDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.clients`: Exposes CRUD operations for the **clients** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Clients
    * const clients = await prisma.clients.findMany()
    * ```
    */
  get clients(): Prisma.clientsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.consults`: Exposes CRUD operations for the **consults** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Consults
    * const consults = await prisma.consults.findMany()
    * ```
    */
  get consults(): Prisma.consultsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.users`: Exposes CRUD operations for the **users** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.users.findMany()
    * ```
    */
  get users(): Prisma.usersDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.8.2
   * Query Engine version: 2060c79ba17c6bb9f5823312b6f6b7f4a845738e
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    cases: 'cases',
    clients: 'clients',
    consults: 'consults',
    users: 'users'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "cases" | "clients" | "consults" | "users"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      cases: {
        payload: Prisma.$casesPayload<ExtArgs>
        fields: Prisma.casesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.casesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$casesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.casesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$casesPayload>
          }
          findFirst: {
            args: Prisma.casesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$casesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.casesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$casesPayload>
          }
          findMany: {
            args: Prisma.casesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$casesPayload>[]
          }
          create: {
            args: Prisma.casesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$casesPayload>
          }
          createMany: {
            args: Prisma.casesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.casesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$casesPayload>
          }
          update: {
            args: Prisma.casesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$casesPayload>
          }
          deleteMany: {
            args: Prisma.casesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.casesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.casesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$casesPayload>
          }
          aggregate: {
            args: Prisma.CasesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCases>
          }
          groupBy: {
            args: Prisma.casesGroupByArgs<ExtArgs>
            result: $Utils.Optional<CasesGroupByOutputType>[]
          }
          count: {
            args: Prisma.casesCountArgs<ExtArgs>
            result: $Utils.Optional<CasesCountAggregateOutputType> | number
          }
        }
      }
      clients: {
        payload: Prisma.$clientsPayload<ExtArgs>
        fields: Prisma.clientsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.clientsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$clientsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.clientsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$clientsPayload>
          }
          findFirst: {
            args: Prisma.clientsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$clientsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.clientsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$clientsPayload>
          }
          findMany: {
            args: Prisma.clientsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$clientsPayload>[]
          }
          create: {
            args: Prisma.clientsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$clientsPayload>
          }
          createMany: {
            args: Prisma.clientsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.clientsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$clientsPayload>
          }
          update: {
            args: Prisma.clientsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$clientsPayload>
          }
          deleteMany: {
            args: Prisma.clientsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.clientsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.clientsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$clientsPayload>
          }
          aggregate: {
            args: Prisma.ClientsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateClients>
          }
          groupBy: {
            args: Prisma.clientsGroupByArgs<ExtArgs>
            result: $Utils.Optional<ClientsGroupByOutputType>[]
          }
          count: {
            args: Prisma.clientsCountArgs<ExtArgs>
            result: $Utils.Optional<ClientsCountAggregateOutputType> | number
          }
        }
      }
      consults: {
        payload: Prisma.$consultsPayload<ExtArgs>
        fields: Prisma.consultsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.consultsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$consultsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.consultsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$consultsPayload>
          }
          findFirst: {
            args: Prisma.consultsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$consultsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.consultsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$consultsPayload>
          }
          findMany: {
            args: Prisma.consultsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$consultsPayload>[]
          }
          create: {
            args: Prisma.consultsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$consultsPayload>
          }
          createMany: {
            args: Prisma.consultsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.consultsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$consultsPayload>
          }
          update: {
            args: Prisma.consultsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$consultsPayload>
          }
          deleteMany: {
            args: Prisma.consultsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.consultsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.consultsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$consultsPayload>
          }
          aggregate: {
            args: Prisma.ConsultsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateConsults>
          }
          groupBy: {
            args: Prisma.consultsGroupByArgs<ExtArgs>
            result: $Utils.Optional<ConsultsGroupByOutputType>[]
          }
          count: {
            args: Prisma.consultsCountArgs<ExtArgs>
            result: $Utils.Optional<ConsultsCountAggregateOutputType> | number
          }
        }
      }
      users: {
        payload: Prisma.$usersPayload<ExtArgs>
        fields: Prisma.usersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.usersFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.usersFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          findFirst: {
            args: Prisma.usersFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.usersFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          findMany: {
            args: Prisma.usersFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>[]
          }
          create: {
            args: Prisma.usersCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          createMany: {
            args: Prisma.usersCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.usersDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          update: {
            args: Prisma.usersUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          deleteMany: {
            args: Prisma.usersDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.usersUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.usersUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          aggregate: {
            args: Prisma.UsersAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUsers>
          }
          groupBy: {
            args: Prisma.usersGroupByArgs<ExtArgs>
            result: $Utils.Optional<UsersGroupByOutputType>[]
          }
          count: {
            args: Prisma.usersCountArgs<ExtArgs>
            result: $Utils.Optional<UsersCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    cases?: casesOmit
    clients?: clientsOmit
    consults?: consultsOmit
    users?: usersOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type CasesCountOutputType
   */

  export type CasesCountOutputType = {
    consults: number
  }

  export type CasesCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    consults?: boolean | CasesCountOutputTypeCountConsultsArgs
  }

  // Custom InputTypes
  /**
   * CasesCountOutputType without action
   */
  export type CasesCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CasesCountOutputType
     */
    select?: CasesCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CasesCountOutputType without action
   */
  export type CasesCountOutputTypeCountConsultsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: consultsWhereInput
  }


  /**
   * Count Type ClientsCountOutputType
   */

  export type ClientsCountOutputType = {
    cases: number
  }

  export type ClientsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cases?: boolean | ClientsCountOutputTypeCountCasesArgs
  }

  // Custom InputTypes
  /**
   * ClientsCountOutputType without action
   */
  export type ClientsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClientsCountOutputType
     */
    select?: ClientsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ClientsCountOutputType without action
   */
  export type ClientsCountOutputTypeCountCasesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: casesWhereInput
  }


  /**
   * Count Type UsersCountOutputType
   */

  export type UsersCountOutputType = {
    cases: number
  }

  export type UsersCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cases?: boolean | UsersCountOutputTypeCountCasesArgs
  }

  // Custom InputTypes
  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersCountOutputType
     */
    select?: UsersCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountCasesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: casesWhereInput
  }


  /**
   * Models
   */

  /**
   * Model cases
   */

  export type AggregateCases = {
    _count: CasesCountAggregateOutputType | null
    _avg: CasesAvgAggregateOutputType | null
    _sum: CasesSumAggregateOutputType | null
    _min: CasesMinAggregateOutputType | null
    _max: CasesMaxAggregateOutputType | null
  }

  export type CasesAvgAggregateOutputType = {
    id_cases: number | null
    id_client: number | null
    case_author: number | null
  }

  export type CasesSumAggregateOutputType = {
    id_cases: number | null
    id_client: number | null
    case_author: number | null
  }

  export type CasesMinAggregateOutputType = {
    id_cases: number | null
    case_uuid: string | null
    case_number: string | null
    id_client: number | null
    case_author: number | null
    case_name: string | null
    case_type: string | null
    case_description: string | null
    created_at: Date | null
    updated_at: Date | null
    is_deleted: boolean | null
    deleted_at: Date | null
  }

  export type CasesMaxAggregateOutputType = {
    id_cases: number | null
    case_uuid: string | null
    case_number: string | null
    id_client: number | null
    case_author: number | null
    case_name: string | null
    case_type: string | null
    case_description: string | null
    created_at: Date | null
    updated_at: Date | null
    is_deleted: boolean | null
    deleted_at: Date | null
  }

  export type CasesCountAggregateOutputType = {
    id_cases: number
    case_uuid: number
    case_number: number
    id_client: number
    case_author: number
    case_name: number
    case_type: number
    case_description: number
    created_at: number
    updated_at: number
    is_deleted: number
    deleted_at: number
    _all: number
  }


  export type CasesAvgAggregateInputType = {
    id_cases?: true
    id_client?: true
    case_author?: true
  }

  export type CasesSumAggregateInputType = {
    id_cases?: true
    id_client?: true
    case_author?: true
  }

  export type CasesMinAggregateInputType = {
    id_cases?: true
    case_uuid?: true
    case_number?: true
    id_client?: true
    case_author?: true
    case_name?: true
    case_type?: true
    case_description?: true
    created_at?: true
    updated_at?: true
    is_deleted?: true
    deleted_at?: true
  }

  export type CasesMaxAggregateInputType = {
    id_cases?: true
    case_uuid?: true
    case_number?: true
    id_client?: true
    case_author?: true
    case_name?: true
    case_type?: true
    case_description?: true
    created_at?: true
    updated_at?: true
    is_deleted?: true
    deleted_at?: true
  }

  export type CasesCountAggregateInputType = {
    id_cases?: true
    case_uuid?: true
    case_number?: true
    id_client?: true
    case_author?: true
    case_name?: true
    case_type?: true
    case_description?: true
    created_at?: true
    updated_at?: true
    is_deleted?: true
    deleted_at?: true
    _all?: true
  }

  export type CasesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which cases to aggregate.
     */
    where?: casesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of cases to fetch.
     */
    orderBy?: casesOrderByWithRelationInput | casesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: casesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` cases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` cases.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned cases
    **/
    _count?: true | CasesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CasesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CasesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CasesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CasesMaxAggregateInputType
  }

  export type GetCasesAggregateType<T extends CasesAggregateArgs> = {
        [P in keyof T & keyof AggregateCases]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCases[P]>
      : GetScalarType<T[P], AggregateCases[P]>
  }




  export type casesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: casesWhereInput
    orderBy?: casesOrderByWithAggregationInput | casesOrderByWithAggregationInput[]
    by: CasesScalarFieldEnum[] | CasesScalarFieldEnum
    having?: casesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CasesCountAggregateInputType | true
    _avg?: CasesAvgAggregateInputType
    _sum?: CasesSumAggregateInputType
    _min?: CasesMinAggregateInputType
    _max?: CasesMaxAggregateInputType
  }

  export type CasesGroupByOutputType = {
    id_cases: number
    case_uuid: string
    case_number: string | null
    id_client: number
    case_author: number | null
    case_name: string
    case_type: string | null
    case_description: string | null
    created_at: Date | null
    updated_at: Date | null
    is_deleted: boolean | null
    deleted_at: Date | null
    _count: CasesCountAggregateOutputType | null
    _avg: CasesAvgAggregateOutputType | null
    _sum: CasesSumAggregateOutputType | null
    _min: CasesMinAggregateOutputType | null
    _max: CasesMaxAggregateOutputType | null
  }

  type GetCasesGroupByPayload<T extends casesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CasesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CasesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CasesGroupByOutputType[P]>
            : GetScalarType<T[P], CasesGroupByOutputType[P]>
        }
      >
    >


  export type casesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id_cases?: boolean
    case_uuid?: boolean
    case_number?: boolean
    id_client?: boolean
    case_author?: boolean
    case_name?: boolean
    case_type?: boolean
    case_description?: boolean
    created_at?: boolean
    updated_at?: boolean
    is_deleted?: boolean
    deleted_at?: boolean
    clients?: boolean | clientsDefaultArgs<ExtArgs>
    users?: boolean | cases$usersArgs<ExtArgs>
    consults?: boolean | cases$consultsArgs<ExtArgs>
    _count?: boolean | CasesCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cases"]>



  export type casesSelectScalar = {
    id_cases?: boolean
    case_uuid?: boolean
    case_number?: boolean
    id_client?: boolean
    case_author?: boolean
    case_name?: boolean
    case_type?: boolean
    case_description?: boolean
    created_at?: boolean
    updated_at?: boolean
    is_deleted?: boolean
    deleted_at?: boolean
  }

  export type casesOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id_cases" | "case_uuid" | "case_number" | "id_client" | "case_author" | "case_name" | "case_type" | "case_description" | "created_at" | "updated_at" | "is_deleted" | "deleted_at", ExtArgs["result"]["cases"]>
  export type casesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    clients?: boolean | clientsDefaultArgs<ExtArgs>
    users?: boolean | cases$usersArgs<ExtArgs>
    consults?: boolean | cases$consultsArgs<ExtArgs>
    _count?: boolean | CasesCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $casesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "cases"
    objects: {
      clients: Prisma.$clientsPayload<ExtArgs>
      users: Prisma.$usersPayload<ExtArgs> | null
      consults: Prisma.$consultsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id_cases: number
      case_uuid: string
      case_number: string | null
      id_client: number
      case_author: number | null
      case_name: string
      case_type: string | null
      case_description: string | null
      created_at: Date | null
      updated_at: Date | null
      is_deleted: boolean | null
      deleted_at: Date | null
    }, ExtArgs["result"]["cases"]>
    composites: {}
  }

  type casesGetPayload<S extends boolean | null | undefined | casesDefaultArgs> = $Result.GetResult<Prisma.$casesPayload, S>

  type casesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<casesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CasesCountAggregateInputType | true
    }

  export interface casesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['cases'], meta: { name: 'cases' } }
    /**
     * Find zero or one Cases that matches the filter.
     * @param {casesFindUniqueArgs} args - Arguments to find a Cases
     * @example
     * // Get one Cases
     * const cases = await prisma.cases.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends casesFindUniqueArgs>(args: SelectSubset<T, casesFindUniqueArgs<ExtArgs>>): Prisma__casesClient<$Result.GetResult<Prisma.$casesPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Cases that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {casesFindUniqueOrThrowArgs} args - Arguments to find a Cases
     * @example
     * // Get one Cases
     * const cases = await prisma.cases.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends casesFindUniqueOrThrowArgs>(args: SelectSubset<T, casesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__casesClient<$Result.GetResult<Prisma.$casesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Cases that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {casesFindFirstArgs} args - Arguments to find a Cases
     * @example
     * // Get one Cases
     * const cases = await prisma.cases.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends casesFindFirstArgs>(args?: SelectSubset<T, casesFindFirstArgs<ExtArgs>>): Prisma__casesClient<$Result.GetResult<Prisma.$casesPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Cases that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {casesFindFirstOrThrowArgs} args - Arguments to find a Cases
     * @example
     * // Get one Cases
     * const cases = await prisma.cases.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends casesFindFirstOrThrowArgs>(args?: SelectSubset<T, casesFindFirstOrThrowArgs<ExtArgs>>): Prisma__casesClient<$Result.GetResult<Prisma.$casesPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Cases that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {casesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Cases
     * const cases = await prisma.cases.findMany()
     * 
     * // Get first 10 Cases
     * const cases = await prisma.cases.findMany({ take: 10 })
     * 
     * // Only select the `id_cases`
     * const casesWithId_casesOnly = await prisma.cases.findMany({ select: { id_cases: true } })
     * 
     */
    findMany<T extends casesFindManyArgs>(args?: SelectSubset<T, casesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$casesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Cases.
     * @param {casesCreateArgs} args - Arguments to create a Cases.
     * @example
     * // Create one Cases
     * const Cases = await prisma.cases.create({
     *   data: {
     *     // ... data to create a Cases
     *   }
     * })
     * 
     */
    create<T extends casesCreateArgs>(args: SelectSubset<T, casesCreateArgs<ExtArgs>>): Prisma__casesClient<$Result.GetResult<Prisma.$casesPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Cases.
     * @param {casesCreateManyArgs} args - Arguments to create many Cases.
     * @example
     * // Create many Cases
     * const cases = await prisma.cases.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends casesCreateManyArgs>(args?: SelectSubset<T, casesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Cases.
     * @param {casesDeleteArgs} args - Arguments to delete one Cases.
     * @example
     * // Delete one Cases
     * const Cases = await prisma.cases.delete({
     *   where: {
     *     // ... filter to delete one Cases
     *   }
     * })
     * 
     */
    delete<T extends casesDeleteArgs>(args: SelectSubset<T, casesDeleteArgs<ExtArgs>>): Prisma__casesClient<$Result.GetResult<Prisma.$casesPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Cases.
     * @param {casesUpdateArgs} args - Arguments to update one Cases.
     * @example
     * // Update one Cases
     * const cases = await prisma.cases.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends casesUpdateArgs>(args: SelectSubset<T, casesUpdateArgs<ExtArgs>>): Prisma__casesClient<$Result.GetResult<Prisma.$casesPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Cases.
     * @param {casesDeleteManyArgs} args - Arguments to filter Cases to delete.
     * @example
     * // Delete a few Cases
     * const { count } = await prisma.cases.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends casesDeleteManyArgs>(args?: SelectSubset<T, casesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Cases.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {casesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Cases
     * const cases = await prisma.cases.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends casesUpdateManyArgs>(args: SelectSubset<T, casesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Cases.
     * @param {casesUpsertArgs} args - Arguments to update or create a Cases.
     * @example
     * // Update or create a Cases
     * const cases = await prisma.cases.upsert({
     *   create: {
     *     // ... data to create a Cases
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Cases we want to update
     *   }
     * })
     */
    upsert<T extends casesUpsertArgs>(args: SelectSubset<T, casesUpsertArgs<ExtArgs>>): Prisma__casesClient<$Result.GetResult<Prisma.$casesPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Cases.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {casesCountArgs} args - Arguments to filter Cases to count.
     * @example
     * // Count the number of Cases
     * const count = await prisma.cases.count({
     *   where: {
     *     // ... the filter for the Cases we want to count
     *   }
     * })
    **/
    count<T extends casesCountArgs>(
      args?: Subset<T, casesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CasesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Cases.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CasesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CasesAggregateArgs>(args: Subset<T, CasesAggregateArgs>): Prisma.PrismaPromise<GetCasesAggregateType<T>>

    /**
     * Group by Cases.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {casesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends casesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: casesGroupByArgs['orderBy'] }
        : { orderBy?: casesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, casesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCasesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the cases model
   */
  readonly fields: casesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for cases.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__casesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    clients<T extends clientsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, clientsDefaultArgs<ExtArgs>>): Prisma__clientsClient<$Result.GetResult<Prisma.$clientsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    users<T extends cases$usersArgs<ExtArgs> = {}>(args?: Subset<T, cases$usersArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    consults<T extends cases$consultsArgs<ExtArgs> = {}>(args?: Subset<T, cases$consultsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$consultsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the cases model
   */
  interface casesFieldRefs {
    readonly id_cases: FieldRef<"cases", 'Int'>
    readonly case_uuid: FieldRef<"cases", 'String'>
    readonly case_number: FieldRef<"cases", 'String'>
    readonly id_client: FieldRef<"cases", 'Int'>
    readonly case_author: FieldRef<"cases", 'Int'>
    readonly case_name: FieldRef<"cases", 'String'>
    readonly case_type: FieldRef<"cases", 'String'>
    readonly case_description: FieldRef<"cases", 'String'>
    readonly created_at: FieldRef<"cases", 'DateTime'>
    readonly updated_at: FieldRef<"cases", 'DateTime'>
    readonly is_deleted: FieldRef<"cases", 'Boolean'>
    readonly deleted_at: FieldRef<"cases", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * cases findUnique
   */
  export type casesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cases
     */
    select?: casesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the cases
     */
    omit?: casesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: casesInclude<ExtArgs> | null
    /**
     * Filter, which cases to fetch.
     */
    where: casesWhereUniqueInput
  }

  /**
   * cases findUniqueOrThrow
   */
  export type casesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cases
     */
    select?: casesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the cases
     */
    omit?: casesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: casesInclude<ExtArgs> | null
    /**
     * Filter, which cases to fetch.
     */
    where: casesWhereUniqueInput
  }

  /**
   * cases findFirst
   */
  export type casesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cases
     */
    select?: casesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the cases
     */
    omit?: casesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: casesInclude<ExtArgs> | null
    /**
     * Filter, which cases to fetch.
     */
    where?: casesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of cases to fetch.
     */
    orderBy?: casesOrderByWithRelationInput | casesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for cases.
     */
    cursor?: casesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` cases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` cases.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of cases.
     */
    distinct?: CasesScalarFieldEnum | CasesScalarFieldEnum[]
  }

  /**
   * cases findFirstOrThrow
   */
  export type casesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cases
     */
    select?: casesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the cases
     */
    omit?: casesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: casesInclude<ExtArgs> | null
    /**
     * Filter, which cases to fetch.
     */
    where?: casesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of cases to fetch.
     */
    orderBy?: casesOrderByWithRelationInput | casesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for cases.
     */
    cursor?: casesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` cases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` cases.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of cases.
     */
    distinct?: CasesScalarFieldEnum | CasesScalarFieldEnum[]
  }

  /**
   * cases findMany
   */
  export type casesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cases
     */
    select?: casesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the cases
     */
    omit?: casesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: casesInclude<ExtArgs> | null
    /**
     * Filter, which cases to fetch.
     */
    where?: casesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of cases to fetch.
     */
    orderBy?: casesOrderByWithRelationInput | casesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing cases.
     */
    cursor?: casesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` cases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` cases.
     */
    skip?: number
    distinct?: CasesScalarFieldEnum | CasesScalarFieldEnum[]
  }

  /**
   * cases create
   */
  export type casesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cases
     */
    select?: casesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the cases
     */
    omit?: casesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: casesInclude<ExtArgs> | null
    /**
     * The data needed to create a cases.
     */
    data: XOR<casesCreateInput, casesUncheckedCreateInput>
  }

  /**
   * cases createMany
   */
  export type casesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many cases.
     */
    data: casesCreateManyInput | casesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * cases update
   */
  export type casesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cases
     */
    select?: casesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the cases
     */
    omit?: casesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: casesInclude<ExtArgs> | null
    /**
     * The data needed to update a cases.
     */
    data: XOR<casesUpdateInput, casesUncheckedUpdateInput>
    /**
     * Choose, which cases to update.
     */
    where: casesWhereUniqueInput
  }

  /**
   * cases updateMany
   */
  export type casesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update cases.
     */
    data: XOR<casesUpdateManyMutationInput, casesUncheckedUpdateManyInput>
    /**
     * Filter which cases to update
     */
    where?: casesWhereInput
    /**
     * Limit how many cases to update.
     */
    limit?: number
  }

  /**
   * cases upsert
   */
  export type casesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cases
     */
    select?: casesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the cases
     */
    omit?: casesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: casesInclude<ExtArgs> | null
    /**
     * The filter to search for the cases to update in case it exists.
     */
    where: casesWhereUniqueInput
    /**
     * In case the cases found by the `where` argument doesn't exist, create a new cases with this data.
     */
    create: XOR<casesCreateInput, casesUncheckedCreateInput>
    /**
     * In case the cases was found with the provided `where` argument, update it with this data.
     */
    update: XOR<casesUpdateInput, casesUncheckedUpdateInput>
  }

  /**
   * cases delete
   */
  export type casesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cases
     */
    select?: casesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the cases
     */
    omit?: casesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: casesInclude<ExtArgs> | null
    /**
     * Filter which cases to delete.
     */
    where: casesWhereUniqueInput
  }

  /**
   * cases deleteMany
   */
  export type casesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which cases to delete
     */
    where?: casesWhereInput
    /**
     * Limit how many cases to delete.
     */
    limit?: number
  }

  /**
   * cases.users
   */
  export type cases$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    where?: usersWhereInput
  }

  /**
   * cases.consults
   */
  export type cases$consultsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the consults
     */
    select?: consultsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the consults
     */
    omit?: consultsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: consultsInclude<ExtArgs> | null
    where?: consultsWhereInput
    orderBy?: consultsOrderByWithRelationInput | consultsOrderByWithRelationInput[]
    cursor?: consultsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ConsultsScalarFieldEnum | ConsultsScalarFieldEnum[]
  }

  /**
   * cases without action
   */
  export type casesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cases
     */
    select?: casesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the cases
     */
    omit?: casesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: casesInclude<ExtArgs> | null
  }


  /**
   * Model clients
   */

  export type AggregateClients = {
    _count: ClientsCountAggregateOutputType | null
    _avg: ClientsAvgAggregateOutputType | null
    _sum: ClientsSumAggregateOutputType | null
    _min: ClientsMinAggregateOutputType | null
    _max: ClientsMaxAggregateOutputType | null
  }

  export type ClientsAvgAggregateOutputType = {
    id_client: number | null
  }

  export type ClientsSumAggregateOutputType = {
    id_client: number | null
  }

  export type ClientsMinAggregateOutputType = {
    id_client: number | null
    client_uuid: string | null
    client_code: string | null
    nama_client: string | null
    badan_usaha: string | null
    telp: string | null
    alamat: string | null
    npwp: string | null
    nkp: string | null
    keterangan: string | null
    created_at: Date | null
    updated_at: Date | null
    is_deleted: boolean | null
    deleted_at: Date | null
  }

  export type ClientsMaxAggregateOutputType = {
    id_client: number | null
    client_uuid: string | null
    client_code: string | null
    nama_client: string | null
    badan_usaha: string | null
    telp: string | null
    alamat: string | null
    npwp: string | null
    nkp: string | null
    keterangan: string | null
    created_at: Date | null
    updated_at: Date | null
    is_deleted: boolean | null
    deleted_at: Date | null
  }

  export type ClientsCountAggregateOutputType = {
    id_client: number
    client_uuid: number
    client_code: number
    nama_client: number
    badan_usaha: number
    telp: number
    alamat: number
    npwp: number
    nkp: number
    keterangan: number
    created_at: number
    updated_at: number
    is_deleted: number
    deleted_at: number
    _all: number
  }


  export type ClientsAvgAggregateInputType = {
    id_client?: true
  }

  export type ClientsSumAggregateInputType = {
    id_client?: true
  }

  export type ClientsMinAggregateInputType = {
    id_client?: true
    client_uuid?: true
    client_code?: true
    nama_client?: true
    badan_usaha?: true
    telp?: true
    alamat?: true
    npwp?: true
    nkp?: true
    keterangan?: true
    created_at?: true
    updated_at?: true
    is_deleted?: true
    deleted_at?: true
  }

  export type ClientsMaxAggregateInputType = {
    id_client?: true
    client_uuid?: true
    client_code?: true
    nama_client?: true
    badan_usaha?: true
    telp?: true
    alamat?: true
    npwp?: true
    nkp?: true
    keterangan?: true
    created_at?: true
    updated_at?: true
    is_deleted?: true
    deleted_at?: true
  }

  export type ClientsCountAggregateInputType = {
    id_client?: true
    client_uuid?: true
    client_code?: true
    nama_client?: true
    badan_usaha?: true
    telp?: true
    alamat?: true
    npwp?: true
    nkp?: true
    keterangan?: true
    created_at?: true
    updated_at?: true
    is_deleted?: true
    deleted_at?: true
    _all?: true
  }

  export type ClientsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which clients to aggregate.
     */
    where?: clientsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of clients to fetch.
     */
    orderBy?: clientsOrderByWithRelationInput | clientsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: clientsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` clients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` clients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned clients
    **/
    _count?: true | ClientsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ClientsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ClientsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClientsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClientsMaxAggregateInputType
  }

  export type GetClientsAggregateType<T extends ClientsAggregateArgs> = {
        [P in keyof T & keyof AggregateClients]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateClients[P]>
      : GetScalarType<T[P], AggregateClients[P]>
  }




  export type clientsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: clientsWhereInput
    orderBy?: clientsOrderByWithAggregationInput | clientsOrderByWithAggregationInput[]
    by: ClientsScalarFieldEnum[] | ClientsScalarFieldEnum
    having?: clientsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClientsCountAggregateInputType | true
    _avg?: ClientsAvgAggregateInputType
    _sum?: ClientsSumAggregateInputType
    _min?: ClientsMinAggregateInputType
    _max?: ClientsMaxAggregateInputType
  }

  export type ClientsGroupByOutputType = {
    id_client: number
    client_uuid: string
    client_code: string | null
    nama_client: string
    badan_usaha: string | null
    telp: string | null
    alamat: string | null
    npwp: string | null
    nkp: string | null
    keterangan: string | null
    created_at: Date | null
    updated_at: Date | null
    is_deleted: boolean | null
    deleted_at: Date | null
    _count: ClientsCountAggregateOutputType | null
    _avg: ClientsAvgAggregateOutputType | null
    _sum: ClientsSumAggregateOutputType | null
    _min: ClientsMinAggregateOutputType | null
    _max: ClientsMaxAggregateOutputType | null
  }

  type GetClientsGroupByPayload<T extends clientsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ClientsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClientsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClientsGroupByOutputType[P]>
            : GetScalarType<T[P], ClientsGroupByOutputType[P]>
        }
      >
    >


  export type clientsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id_client?: boolean
    client_uuid?: boolean
    client_code?: boolean
    nama_client?: boolean
    badan_usaha?: boolean
    telp?: boolean
    alamat?: boolean
    npwp?: boolean
    nkp?: boolean
    keterangan?: boolean
    created_at?: boolean
    updated_at?: boolean
    is_deleted?: boolean
    deleted_at?: boolean
    cases?: boolean | clients$casesArgs<ExtArgs>
    _count?: boolean | ClientsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["clients"]>



  export type clientsSelectScalar = {
    id_client?: boolean
    client_uuid?: boolean
    client_code?: boolean
    nama_client?: boolean
    badan_usaha?: boolean
    telp?: boolean
    alamat?: boolean
    npwp?: boolean
    nkp?: boolean
    keterangan?: boolean
    created_at?: boolean
    updated_at?: boolean
    is_deleted?: boolean
    deleted_at?: boolean
  }

  export type clientsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id_client" | "client_uuid" | "client_code" | "nama_client" | "badan_usaha" | "telp" | "alamat" | "npwp" | "nkp" | "keterangan" | "created_at" | "updated_at" | "is_deleted" | "deleted_at", ExtArgs["result"]["clients"]>
  export type clientsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cases?: boolean | clients$casesArgs<ExtArgs>
    _count?: boolean | ClientsCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $clientsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "clients"
    objects: {
      cases: Prisma.$casesPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id_client: number
      client_uuid: string
      client_code: string | null
      nama_client: string
      badan_usaha: string | null
      telp: string | null
      alamat: string | null
      npwp: string | null
      nkp: string | null
      keterangan: string | null
      created_at: Date | null
      updated_at: Date | null
      is_deleted: boolean | null
      deleted_at: Date | null
    }, ExtArgs["result"]["clients"]>
    composites: {}
  }

  type clientsGetPayload<S extends boolean | null | undefined | clientsDefaultArgs> = $Result.GetResult<Prisma.$clientsPayload, S>

  type clientsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<clientsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ClientsCountAggregateInputType | true
    }

  export interface clientsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['clients'], meta: { name: 'clients' } }
    /**
     * Find zero or one Clients that matches the filter.
     * @param {clientsFindUniqueArgs} args - Arguments to find a Clients
     * @example
     * // Get one Clients
     * const clients = await prisma.clients.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends clientsFindUniqueArgs>(args: SelectSubset<T, clientsFindUniqueArgs<ExtArgs>>): Prisma__clientsClient<$Result.GetResult<Prisma.$clientsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Clients that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {clientsFindUniqueOrThrowArgs} args - Arguments to find a Clients
     * @example
     * // Get one Clients
     * const clients = await prisma.clients.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends clientsFindUniqueOrThrowArgs>(args: SelectSubset<T, clientsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__clientsClient<$Result.GetResult<Prisma.$clientsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Clients that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {clientsFindFirstArgs} args - Arguments to find a Clients
     * @example
     * // Get one Clients
     * const clients = await prisma.clients.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends clientsFindFirstArgs>(args?: SelectSubset<T, clientsFindFirstArgs<ExtArgs>>): Prisma__clientsClient<$Result.GetResult<Prisma.$clientsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Clients that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {clientsFindFirstOrThrowArgs} args - Arguments to find a Clients
     * @example
     * // Get one Clients
     * const clients = await prisma.clients.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends clientsFindFirstOrThrowArgs>(args?: SelectSubset<T, clientsFindFirstOrThrowArgs<ExtArgs>>): Prisma__clientsClient<$Result.GetResult<Prisma.$clientsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Clients that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {clientsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Clients
     * const clients = await prisma.clients.findMany()
     * 
     * // Get first 10 Clients
     * const clients = await prisma.clients.findMany({ take: 10 })
     * 
     * // Only select the `id_client`
     * const clientsWithId_clientOnly = await prisma.clients.findMany({ select: { id_client: true } })
     * 
     */
    findMany<T extends clientsFindManyArgs>(args?: SelectSubset<T, clientsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$clientsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Clients.
     * @param {clientsCreateArgs} args - Arguments to create a Clients.
     * @example
     * // Create one Clients
     * const Clients = await prisma.clients.create({
     *   data: {
     *     // ... data to create a Clients
     *   }
     * })
     * 
     */
    create<T extends clientsCreateArgs>(args: SelectSubset<T, clientsCreateArgs<ExtArgs>>): Prisma__clientsClient<$Result.GetResult<Prisma.$clientsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Clients.
     * @param {clientsCreateManyArgs} args - Arguments to create many Clients.
     * @example
     * // Create many Clients
     * const clients = await prisma.clients.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends clientsCreateManyArgs>(args?: SelectSubset<T, clientsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Clients.
     * @param {clientsDeleteArgs} args - Arguments to delete one Clients.
     * @example
     * // Delete one Clients
     * const Clients = await prisma.clients.delete({
     *   where: {
     *     // ... filter to delete one Clients
     *   }
     * })
     * 
     */
    delete<T extends clientsDeleteArgs>(args: SelectSubset<T, clientsDeleteArgs<ExtArgs>>): Prisma__clientsClient<$Result.GetResult<Prisma.$clientsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Clients.
     * @param {clientsUpdateArgs} args - Arguments to update one Clients.
     * @example
     * // Update one Clients
     * const clients = await prisma.clients.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends clientsUpdateArgs>(args: SelectSubset<T, clientsUpdateArgs<ExtArgs>>): Prisma__clientsClient<$Result.GetResult<Prisma.$clientsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Clients.
     * @param {clientsDeleteManyArgs} args - Arguments to filter Clients to delete.
     * @example
     * // Delete a few Clients
     * const { count } = await prisma.clients.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends clientsDeleteManyArgs>(args?: SelectSubset<T, clientsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Clients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {clientsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Clients
     * const clients = await prisma.clients.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends clientsUpdateManyArgs>(args: SelectSubset<T, clientsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Clients.
     * @param {clientsUpsertArgs} args - Arguments to update or create a Clients.
     * @example
     * // Update or create a Clients
     * const clients = await prisma.clients.upsert({
     *   create: {
     *     // ... data to create a Clients
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Clients we want to update
     *   }
     * })
     */
    upsert<T extends clientsUpsertArgs>(args: SelectSubset<T, clientsUpsertArgs<ExtArgs>>): Prisma__clientsClient<$Result.GetResult<Prisma.$clientsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Clients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {clientsCountArgs} args - Arguments to filter Clients to count.
     * @example
     * // Count the number of Clients
     * const count = await prisma.clients.count({
     *   where: {
     *     // ... the filter for the Clients we want to count
     *   }
     * })
    **/
    count<T extends clientsCountArgs>(
      args?: Subset<T, clientsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClientsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Clients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClientsAggregateArgs>(args: Subset<T, ClientsAggregateArgs>): Prisma.PrismaPromise<GetClientsAggregateType<T>>

    /**
     * Group by Clients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {clientsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends clientsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: clientsGroupByArgs['orderBy'] }
        : { orderBy?: clientsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, clientsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClientsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the clients model
   */
  readonly fields: clientsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for clients.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__clientsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    cases<T extends clients$casesArgs<ExtArgs> = {}>(args?: Subset<T, clients$casesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$casesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the clients model
   */
  interface clientsFieldRefs {
    readonly id_client: FieldRef<"clients", 'Int'>
    readonly client_uuid: FieldRef<"clients", 'String'>
    readonly client_code: FieldRef<"clients", 'String'>
    readonly nama_client: FieldRef<"clients", 'String'>
    readonly badan_usaha: FieldRef<"clients", 'String'>
    readonly telp: FieldRef<"clients", 'String'>
    readonly alamat: FieldRef<"clients", 'String'>
    readonly npwp: FieldRef<"clients", 'String'>
    readonly nkp: FieldRef<"clients", 'String'>
    readonly keterangan: FieldRef<"clients", 'String'>
    readonly created_at: FieldRef<"clients", 'DateTime'>
    readonly updated_at: FieldRef<"clients", 'DateTime'>
    readonly is_deleted: FieldRef<"clients", 'Boolean'>
    readonly deleted_at: FieldRef<"clients", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * clients findUnique
   */
  export type clientsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the clients
     */
    select?: clientsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the clients
     */
    omit?: clientsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: clientsInclude<ExtArgs> | null
    /**
     * Filter, which clients to fetch.
     */
    where: clientsWhereUniqueInput
  }

  /**
   * clients findUniqueOrThrow
   */
  export type clientsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the clients
     */
    select?: clientsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the clients
     */
    omit?: clientsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: clientsInclude<ExtArgs> | null
    /**
     * Filter, which clients to fetch.
     */
    where: clientsWhereUniqueInput
  }

  /**
   * clients findFirst
   */
  export type clientsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the clients
     */
    select?: clientsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the clients
     */
    omit?: clientsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: clientsInclude<ExtArgs> | null
    /**
     * Filter, which clients to fetch.
     */
    where?: clientsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of clients to fetch.
     */
    orderBy?: clientsOrderByWithRelationInput | clientsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for clients.
     */
    cursor?: clientsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` clients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` clients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of clients.
     */
    distinct?: ClientsScalarFieldEnum | ClientsScalarFieldEnum[]
  }

  /**
   * clients findFirstOrThrow
   */
  export type clientsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the clients
     */
    select?: clientsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the clients
     */
    omit?: clientsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: clientsInclude<ExtArgs> | null
    /**
     * Filter, which clients to fetch.
     */
    where?: clientsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of clients to fetch.
     */
    orderBy?: clientsOrderByWithRelationInput | clientsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for clients.
     */
    cursor?: clientsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` clients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` clients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of clients.
     */
    distinct?: ClientsScalarFieldEnum | ClientsScalarFieldEnum[]
  }

  /**
   * clients findMany
   */
  export type clientsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the clients
     */
    select?: clientsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the clients
     */
    omit?: clientsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: clientsInclude<ExtArgs> | null
    /**
     * Filter, which clients to fetch.
     */
    where?: clientsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of clients to fetch.
     */
    orderBy?: clientsOrderByWithRelationInput | clientsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing clients.
     */
    cursor?: clientsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` clients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` clients.
     */
    skip?: number
    distinct?: ClientsScalarFieldEnum | ClientsScalarFieldEnum[]
  }

  /**
   * clients create
   */
  export type clientsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the clients
     */
    select?: clientsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the clients
     */
    omit?: clientsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: clientsInclude<ExtArgs> | null
    /**
     * The data needed to create a clients.
     */
    data: XOR<clientsCreateInput, clientsUncheckedCreateInput>
  }

  /**
   * clients createMany
   */
  export type clientsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many clients.
     */
    data: clientsCreateManyInput | clientsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * clients update
   */
  export type clientsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the clients
     */
    select?: clientsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the clients
     */
    omit?: clientsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: clientsInclude<ExtArgs> | null
    /**
     * The data needed to update a clients.
     */
    data: XOR<clientsUpdateInput, clientsUncheckedUpdateInput>
    /**
     * Choose, which clients to update.
     */
    where: clientsWhereUniqueInput
  }

  /**
   * clients updateMany
   */
  export type clientsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update clients.
     */
    data: XOR<clientsUpdateManyMutationInput, clientsUncheckedUpdateManyInput>
    /**
     * Filter which clients to update
     */
    where?: clientsWhereInput
    /**
     * Limit how many clients to update.
     */
    limit?: number
  }

  /**
   * clients upsert
   */
  export type clientsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the clients
     */
    select?: clientsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the clients
     */
    omit?: clientsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: clientsInclude<ExtArgs> | null
    /**
     * The filter to search for the clients to update in case it exists.
     */
    where: clientsWhereUniqueInput
    /**
     * In case the clients found by the `where` argument doesn't exist, create a new clients with this data.
     */
    create: XOR<clientsCreateInput, clientsUncheckedCreateInput>
    /**
     * In case the clients was found with the provided `where` argument, update it with this data.
     */
    update: XOR<clientsUpdateInput, clientsUncheckedUpdateInput>
  }

  /**
   * clients delete
   */
  export type clientsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the clients
     */
    select?: clientsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the clients
     */
    omit?: clientsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: clientsInclude<ExtArgs> | null
    /**
     * Filter which clients to delete.
     */
    where: clientsWhereUniqueInput
  }

  /**
   * clients deleteMany
   */
  export type clientsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which clients to delete
     */
    where?: clientsWhereInput
    /**
     * Limit how many clients to delete.
     */
    limit?: number
  }

  /**
   * clients.cases
   */
  export type clients$casesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cases
     */
    select?: casesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the cases
     */
    omit?: casesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: casesInclude<ExtArgs> | null
    where?: casesWhereInput
    orderBy?: casesOrderByWithRelationInput | casesOrderByWithRelationInput[]
    cursor?: casesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CasesScalarFieldEnum | CasesScalarFieldEnum[]
  }

  /**
   * clients without action
   */
  export type clientsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the clients
     */
    select?: clientsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the clients
     */
    omit?: clientsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: clientsInclude<ExtArgs> | null
  }


  /**
   * Model consults
   */

  export type AggregateConsults = {
    _count: ConsultsCountAggregateOutputType | null
    _avg: ConsultsAvgAggregateOutputType | null
    _sum: ConsultsSumAggregateOutputType | null
    _min: ConsultsMinAggregateOutputType | null
    _max: ConsultsMaxAggregateOutputType | null
  }

  export type ConsultsAvgAggregateOutputType = {
    id_consults: number | null
    id_cases: number | null
  }

  export type ConsultsSumAggregateOutputType = {
    id_consults: number | null
    id_cases: number | null
  }

  export type ConsultsMinAggregateOutputType = {
    id_consults: number | null
    consult_uuid: string | null
    consult_code: string | null
    id_cases: number | null
    tujuan_consult: string | null
    keterangan_consult: string | null
    hasil_consult: string | null
    konsultan_consult: string | null
    consult_date: Date | null
    created_at: Date | null
    updated_at: Date | null
    is_deleted: boolean | null
    deleted_at: Date | null
  }

  export type ConsultsMaxAggregateOutputType = {
    id_consults: number | null
    consult_uuid: string | null
    consult_code: string | null
    id_cases: number | null
    tujuan_consult: string | null
    keterangan_consult: string | null
    hasil_consult: string | null
    konsultan_consult: string | null
    consult_date: Date | null
    created_at: Date | null
    updated_at: Date | null
    is_deleted: boolean | null
    deleted_at: Date | null
  }

  export type ConsultsCountAggregateOutputType = {
    id_consults: number
    consult_uuid: number
    consult_code: number
    id_cases: number
    tujuan_consult: number
    keterangan_consult: number
    hasil_consult: number
    konsultan_consult: number
    consult_date: number
    created_at: number
    updated_at: number
    is_deleted: number
    deleted_at: number
    _all: number
  }


  export type ConsultsAvgAggregateInputType = {
    id_consults?: true
    id_cases?: true
  }

  export type ConsultsSumAggregateInputType = {
    id_consults?: true
    id_cases?: true
  }

  export type ConsultsMinAggregateInputType = {
    id_consults?: true
    consult_uuid?: true
    consult_code?: true
    id_cases?: true
    tujuan_consult?: true
    keterangan_consult?: true
    hasil_consult?: true
    konsultan_consult?: true
    consult_date?: true
    created_at?: true
    updated_at?: true
    is_deleted?: true
    deleted_at?: true
  }

  export type ConsultsMaxAggregateInputType = {
    id_consults?: true
    consult_uuid?: true
    consult_code?: true
    id_cases?: true
    tujuan_consult?: true
    keterangan_consult?: true
    hasil_consult?: true
    konsultan_consult?: true
    consult_date?: true
    created_at?: true
    updated_at?: true
    is_deleted?: true
    deleted_at?: true
  }

  export type ConsultsCountAggregateInputType = {
    id_consults?: true
    consult_uuid?: true
    consult_code?: true
    id_cases?: true
    tujuan_consult?: true
    keterangan_consult?: true
    hasil_consult?: true
    konsultan_consult?: true
    consult_date?: true
    created_at?: true
    updated_at?: true
    is_deleted?: true
    deleted_at?: true
    _all?: true
  }

  export type ConsultsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which consults to aggregate.
     */
    where?: consultsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of consults to fetch.
     */
    orderBy?: consultsOrderByWithRelationInput | consultsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: consultsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` consults from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` consults.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned consults
    **/
    _count?: true | ConsultsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ConsultsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ConsultsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ConsultsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ConsultsMaxAggregateInputType
  }

  export type GetConsultsAggregateType<T extends ConsultsAggregateArgs> = {
        [P in keyof T & keyof AggregateConsults]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateConsults[P]>
      : GetScalarType<T[P], AggregateConsults[P]>
  }




  export type consultsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: consultsWhereInput
    orderBy?: consultsOrderByWithAggregationInput | consultsOrderByWithAggregationInput[]
    by: ConsultsScalarFieldEnum[] | ConsultsScalarFieldEnum
    having?: consultsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ConsultsCountAggregateInputType | true
    _avg?: ConsultsAvgAggregateInputType
    _sum?: ConsultsSumAggregateInputType
    _min?: ConsultsMinAggregateInputType
    _max?: ConsultsMaxAggregateInputType
  }

  export type ConsultsGroupByOutputType = {
    id_consults: number
    consult_uuid: string
    consult_code: string | null
    id_cases: number
    tujuan_consult: string | null
    keterangan_consult: string | null
    hasil_consult: string | null
    konsultan_consult: string | null
    consult_date: Date | null
    created_at: Date | null
    updated_at: Date | null
    is_deleted: boolean | null
    deleted_at: Date | null
    _count: ConsultsCountAggregateOutputType | null
    _avg: ConsultsAvgAggregateOutputType | null
    _sum: ConsultsSumAggregateOutputType | null
    _min: ConsultsMinAggregateOutputType | null
    _max: ConsultsMaxAggregateOutputType | null
  }

  type GetConsultsGroupByPayload<T extends consultsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ConsultsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ConsultsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ConsultsGroupByOutputType[P]>
            : GetScalarType<T[P], ConsultsGroupByOutputType[P]>
        }
      >
    >


  export type consultsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id_consults?: boolean
    consult_uuid?: boolean
    consult_code?: boolean
    id_cases?: boolean
    tujuan_consult?: boolean
    keterangan_consult?: boolean
    hasil_consult?: boolean
    konsultan_consult?: boolean
    consult_date?: boolean
    created_at?: boolean
    updated_at?: boolean
    is_deleted?: boolean
    deleted_at?: boolean
    cases?: boolean | casesDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["consults"]>



  export type consultsSelectScalar = {
    id_consults?: boolean
    consult_uuid?: boolean
    consult_code?: boolean
    id_cases?: boolean
    tujuan_consult?: boolean
    keterangan_consult?: boolean
    hasil_consult?: boolean
    konsultan_consult?: boolean
    consult_date?: boolean
    created_at?: boolean
    updated_at?: boolean
    is_deleted?: boolean
    deleted_at?: boolean
  }

  export type consultsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id_consults" | "consult_uuid" | "consult_code" | "id_cases" | "tujuan_consult" | "keterangan_consult" | "hasil_consult" | "konsultan_consult" | "consult_date" | "created_at" | "updated_at" | "is_deleted" | "deleted_at", ExtArgs["result"]["consults"]>
  export type consultsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cases?: boolean | casesDefaultArgs<ExtArgs>
  }

  export type $consultsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "consults"
    objects: {
      cases: Prisma.$casesPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id_consults: number
      consult_uuid: string
      consult_code: string | null
      id_cases: number
      tujuan_consult: string | null
      keterangan_consult: string | null
      hasil_consult: string | null
      konsultan_consult: string | null
      consult_date: Date | null
      created_at: Date | null
      updated_at: Date | null
      is_deleted: boolean | null
      deleted_at: Date | null
    }, ExtArgs["result"]["consults"]>
    composites: {}
  }

  type consultsGetPayload<S extends boolean | null | undefined | consultsDefaultArgs> = $Result.GetResult<Prisma.$consultsPayload, S>

  type consultsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<consultsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ConsultsCountAggregateInputType | true
    }

  export interface consultsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['consults'], meta: { name: 'consults' } }
    /**
     * Find zero or one Consults that matches the filter.
     * @param {consultsFindUniqueArgs} args - Arguments to find a Consults
     * @example
     * // Get one Consults
     * const consults = await prisma.consults.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends consultsFindUniqueArgs>(args: SelectSubset<T, consultsFindUniqueArgs<ExtArgs>>): Prisma__consultsClient<$Result.GetResult<Prisma.$consultsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Consults that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {consultsFindUniqueOrThrowArgs} args - Arguments to find a Consults
     * @example
     * // Get one Consults
     * const consults = await prisma.consults.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends consultsFindUniqueOrThrowArgs>(args: SelectSubset<T, consultsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__consultsClient<$Result.GetResult<Prisma.$consultsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Consults that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {consultsFindFirstArgs} args - Arguments to find a Consults
     * @example
     * // Get one Consults
     * const consults = await prisma.consults.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends consultsFindFirstArgs>(args?: SelectSubset<T, consultsFindFirstArgs<ExtArgs>>): Prisma__consultsClient<$Result.GetResult<Prisma.$consultsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Consults that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {consultsFindFirstOrThrowArgs} args - Arguments to find a Consults
     * @example
     * // Get one Consults
     * const consults = await prisma.consults.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends consultsFindFirstOrThrowArgs>(args?: SelectSubset<T, consultsFindFirstOrThrowArgs<ExtArgs>>): Prisma__consultsClient<$Result.GetResult<Prisma.$consultsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Consults that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {consultsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Consults
     * const consults = await prisma.consults.findMany()
     * 
     * // Get first 10 Consults
     * const consults = await prisma.consults.findMany({ take: 10 })
     * 
     * // Only select the `id_consults`
     * const consultsWithId_consultsOnly = await prisma.consults.findMany({ select: { id_consults: true } })
     * 
     */
    findMany<T extends consultsFindManyArgs>(args?: SelectSubset<T, consultsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$consultsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Consults.
     * @param {consultsCreateArgs} args - Arguments to create a Consults.
     * @example
     * // Create one Consults
     * const Consults = await prisma.consults.create({
     *   data: {
     *     // ... data to create a Consults
     *   }
     * })
     * 
     */
    create<T extends consultsCreateArgs>(args: SelectSubset<T, consultsCreateArgs<ExtArgs>>): Prisma__consultsClient<$Result.GetResult<Prisma.$consultsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Consults.
     * @param {consultsCreateManyArgs} args - Arguments to create many Consults.
     * @example
     * // Create many Consults
     * const consults = await prisma.consults.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends consultsCreateManyArgs>(args?: SelectSubset<T, consultsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Consults.
     * @param {consultsDeleteArgs} args - Arguments to delete one Consults.
     * @example
     * // Delete one Consults
     * const Consults = await prisma.consults.delete({
     *   where: {
     *     // ... filter to delete one Consults
     *   }
     * })
     * 
     */
    delete<T extends consultsDeleteArgs>(args: SelectSubset<T, consultsDeleteArgs<ExtArgs>>): Prisma__consultsClient<$Result.GetResult<Prisma.$consultsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Consults.
     * @param {consultsUpdateArgs} args - Arguments to update one Consults.
     * @example
     * // Update one Consults
     * const consults = await prisma.consults.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends consultsUpdateArgs>(args: SelectSubset<T, consultsUpdateArgs<ExtArgs>>): Prisma__consultsClient<$Result.GetResult<Prisma.$consultsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Consults.
     * @param {consultsDeleteManyArgs} args - Arguments to filter Consults to delete.
     * @example
     * // Delete a few Consults
     * const { count } = await prisma.consults.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends consultsDeleteManyArgs>(args?: SelectSubset<T, consultsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Consults.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {consultsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Consults
     * const consults = await prisma.consults.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends consultsUpdateManyArgs>(args: SelectSubset<T, consultsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Consults.
     * @param {consultsUpsertArgs} args - Arguments to update or create a Consults.
     * @example
     * // Update or create a Consults
     * const consults = await prisma.consults.upsert({
     *   create: {
     *     // ... data to create a Consults
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Consults we want to update
     *   }
     * })
     */
    upsert<T extends consultsUpsertArgs>(args: SelectSubset<T, consultsUpsertArgs<ExtArgs>>): Prisma__consultsClient<$Result.GetResult<Prisma.$consultsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Consults.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {consultsCountArgs} args - Arguments to filter Consults to count.
     * @example
     * // Count the number of Consults
     * const count = await prisma.consults.count({
     *   where: {
     *     // ... the filter for the Consults we want to count
     *   }
     * })
    **/
    count<T extends consultsCountArgs>(
      args?: Subset<T, consultsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ConsultsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Consults.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConsultsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ConsultsAggregateArgs>(args: Subset<T, ConsultsAggregateArgs>): Prisma.PrismaPromise<GetConsultsAggregateType<T>>

    /**
     * Group by Consults.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {consultsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends consultsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: consultsGroupByArgs['orderBy'] }
        : { orderBy?: consultsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, consultsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetConsultsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the consults model
   */
  readonly fields: consultsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for consults.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__consultsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    cases<T extends casesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, casesDefaultArgs<ExtArgs>>): Prisma__casesClient<$Result.GetResult<Prisma.$casesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the consults model
   */
  interface consultsFieldRefs {
    readonly id_consults: FieldRef<"consults", 'Int'>
    readonly consult_uuid: FieldRef<"consults", 'String'>
    readonly consult_code: FieldRef<"consults", 'String'>
    readonly id_cases: FieldRef<"consults", 'Int'>
    readonly tujuan_consult: FieldRef<"consults", 'String'>
    readonly keterangan_consult: FieldRef<"consults", 'String'>
    readonly hasil_consult: FieldRef<"consults", 'String'>
    readonly konsultan_consult: FieldRef<"consults", 'String'>
    readonly consult_date: FieldRef<"consults", 'DateTime'>
    readonly created_at: FieldRef<"consults", 'DateTime'>
    readonly updated_at: FieldRef<"consults", 'DateTime'>
    readonly is_deleted: FieldRef<"consults", 'Boolean'>
    readonly deleted_at: FieldRef<"consults", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * consults findUnique
   */
  export type consultsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the consults
     */
    select?: consultsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the consults
     */
    omit?: consultsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: consultsInclude<ExtArgs> | null
    /**
     * Filter, which consults to fetch.
     */
    where: consultsWhereUniqueInput
  }

  /**
   * consults findUniqueOrThrow
   */
  export type consultsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the consults
     */
    select?: consultsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the consults
     */
    omit?: consultsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: consultsInclude<ExtArgs> | null
    /**
     * Filter, which consults to fetch.
     */
    where: consultsWhereUniqueInput
  }

  /**
   * consults findFirst
   */
  export type consultsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the consults
     */
    select?: consultsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the consults
     */
    omit?: consultsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: consultsInclude<ExtArgs> | null
    /**
     * Filter, which consults to fetch.
     */
    where?: consultsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of consults to fetch.
     */
    orderBy?: consultsOrderByWithRelationInput | consultsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for consults.
     */
    cursor?: consultsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` consults from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` consults.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of consults.
     */
    distinct?: ConsultsScalarFieldEnum | ConsultsScalarFieldEnum[]
  }

  /**
   * consults findFirstOrThrow
   */
  export type consultsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the consults
     */
    select?: consultsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the consults
     */
    omit?: consultsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: consultsInclude<ExtArgs> | null
    /**
     * Filter, which consults to fetch.
     */
    where?: consultsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of consults to fetch.
     */
    orderBy?: consultsOrderByWithRelationInput | consultsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for consults.
     */
    cursor?: consultsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` consults from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` consults.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of consults.
     */
    distinct?: ConsultsScalarFieldEnum | ConsultsScalarFieldEnum[]
  }

  /**
   * consults findMany
   */
  export type consultsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the consults
     */
    select?: consultsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the consults
     */
    omit?: consultsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: consultsInclude<ExtArgs> | null
    /**
     * Filter, which consults to fetch.
     */
    where?: consultsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of consults to fetch.
     */
    orderBy?: consultsOrderByWithRelationInput | consultsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing consults.
     */
    cursor?: consultsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` consults from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` consults.
     */
    skip?: number
    distinct?: ConsultsScalarFieldEnum | ConsultsScalarFieldEnum[]
  }

  /**
   * consults create
   */
  export type consultsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the consults
     */
    select?: consultsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the consults
     */
    omit?: consultsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: consultsInclude<ExtArgs> | null
    /**
     * The data needed to create a consults.
     */
    data: XOR<consultsCreateInput, consultsUncheckedCreateInput>
  }

  /**
   * consults createMany
   */
  export type consultsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many consults.
     */
    data: consultsCreateManyInput | consultsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * consults update
   */
  export type consultsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the consults
     */
    select?: consultsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the consults
     */
    omit?: consultsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: consultsInclude<ExtArgs> | null
    /**
     * The data needed to update a consults.
     */
    data: XOR<consultsUpdateInput, consultsUncheckedUpdateInput>
    /**
     * Choose, which consults to update.
     */
    where: consultsWhereUniqueInput
  }

  /**
   * consults updateMany
   */
  export type consultsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update consults.
     */
    data: XOR<consultsUpdateManyMutationInput, consultsUncheckedUpdateManyInput>
    /**
     * Filter which consults to update
     */
    where?: consultsWhereInput
    /**
     * Limit how many consults to update.
     */
    limit?: number
  }

  /**
   * consults upsert
   */
  export type consultsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the consults
     */
    select?: consultsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the consults
     */
    omit?: consultsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: consultsInclude<ExtArgs> | null
    /**
     * The filter to search for the consults to update in case it exists.
     */
    where: consultsWhereUniqueInput
    /**
     * In case the consults found by the `where` argument doesn't exist, create a new consults with this data.
     */
    create: XOR<consultsCreateInput, consultsUncheckedCreateInput>
    /**
     * In case the consults was found with the provided `where` argument, update it with this data.
     */
    update: XOR<consultsUpdateInput, consultsUncheckedUpdateInput>
  }

  /**
   * consults delete
   */
  export type consultsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the consults
     */
    select?: consultsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the consults
     */
    omit?: consultsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: consultsInclude<ExtArgs> | null
    /**
     * Filter which consults to delete.
     */
    where: consultsWhereUniqueInput
  }

  /**
   * consults deleteMany
   */
  export type consultsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which consults to delete
     */
    where?: consultsWhereInput
    /**
     * Limit how many consults to delete.
     */
    limit?: number
  }

  /**
   * consults without action
   */
  export type consultsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the consults
     */
    select?: consultsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the consults
     */
    omit?: consultsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: consultsInclude<ExtArgs> | null
  }


  /**
   * Model users
   */

  export type AggregateUsers = {
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  export type UsersAvgAggregateOutputType = {
    id_user: number | null
  }

  export type UsersSumAggregateOutputType = {
    id_user: number | null
  }

  export type UsersMinAggregateOutputType = {
    id_user: number | null
    username: string | null
    password_hash: string | null
    full_name: string | null
    email: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type UsersMaxAggregateOutputType = {
    id_user: number | null
    username: string | null
    password_hash: string | null
    full_name: string | null
    email: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type UsersCountAggregateOutputType = {
    id_user: number
    username: number
    password_hash: number
    full_name: number
    email: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type UsersAvgAggregateInputType = {
    id_user?: true
  }

  export type UsersSumAggregateInputType = {
    id_user?: true
  }

  export type UsersMinAggregateInputType = {
    id_user?: true
    username?: true
    password_hash?: true
    full_name?: true
    email?: true
    created_at?: true
    updated_at?: true
  }

  export type UsersMaxAggregateInputType = {
    id_user?: true
    username?: true
    password_hash?: true
    full_name?: true
    email?: true
    created_at?: true
    updated_at?: true
  }

  export type UsersCountAggregateInputType = {
    id_user?: true
    username?: true
    password_hash?: true
    full_name?: true
    email?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type UsersAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which users to aggregate.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned users
    **/
    _count?: true | UsersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsersMaxAggregateInputType
  }

  export type GetUsersAggregateType<T extends UsersAggregateArgs> = {
        [P in keyof T & keyof AggregateUsers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsers[P]>
      : GetScalarType<T[P], AggregateUsers[P]>
  }




  export type usersGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: usersWhereInput
    orderBy?: usersOrderByWithAggregationInput | usersOrderByWithAggregationInput[]
    by: UsersScalarFieldEnum[] | UsersScalarFieldEnum
    having?: usersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsersCountAggregateInputType | true
    _avg?: UsersAvgAggregateInputType
    _sum?: UsersSumAggregateInputType
    _min?: UsersMinAggregateInputType
    _max?: UsersMaxAggregateInputType
  }

  export type UsersGroupByOutputType = {
    id_user: number
    username: string
    password_hash: string
    full_name: string | null
    email: string | null
    created_at: Date | null
    updated_at: Date | null
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  type GetUsersGroupByPayload<T extends usersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsersGroupByOutputType[P]>
            : GetScalarType<T[P], UsersGroupByOutputType[P]>
        }
      >
    >


  export type usersSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id_user?: boolean
    username?: boolean
    password_hash?: boolean
    full_name?: boolean
    email?: boolean
    created_at?: boolean
    updated_at?: boolean
    cases?: boolean | users$casesArgs<ExtArgs>
    _count?: boolean | UsersCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["users"]>



  export type usersSelectScalar = {
    id_user?: boolean
    username?: boolean
    password_hash?: boolean
    full_name?: boolean
    email?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type usersOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id_user" | "username" | "password_hash" | "full_name" | "email" | "created_at" | "updated_at", ExtArgs["result"]["users"]>
  export type usersInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cases?: boolean | users$casesArgs<ExtArgs>
    _count?: boolean | UsersCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $usersPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "users"
    objects: {
      cases: Prisma.$casesPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id_user: number
      username: string
      password_hash: string
      full_name: string | null
      email: string | null
      created_at: Date | null
      updated_at: Date | null
    }, ExtArgs["result"]["users"]>
    composites: {}
  }

  type usersGetPayload<S extends boolean | null | undefined | usersDefaultArgs> = $Result.GetResult<Prisma.$usersPayload, S>

  type usersCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<usersFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UsersCountAggregateInputType | true
    }

  export interface usersDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['users'], meta: { name: 'users' } }
    /**
     * Find zero or one Users that matches the filter.
     * @param {usersFindUniqueArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends usersFindUniqueArgs>(args: SelectSubset<T, usersFindUniqueArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Users that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {usersFindUniqueOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends usersFindUniqueOrThrowArgs>(args: SelectSubset<T, usersFindUniqueOrThrowArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindFirstArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends usersFindFirstArgs>(args?: SelectSubset<T, usersFindFirstArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Users that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindFirstOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends usersFindFirstOrThrowArgs>(args?: SelectSubset<T, usersFindFirstOrThrowArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.users.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.users.findMany({ take: 10 })
     * 
     * // Only select the `id_user`
     * const usersWithId_userOnly = await prisma.users.findMany({ select: { id_user: true } })
     * 
     */
    findMany<T extends usersFindManyArgs>(args?: SelectSubset<T, usersFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Users.
     * @param {usersCreateArgs} args - Arguments to create a Users.
     * @example
     * // Create one Users
     * const Users = await prisma.users.create({
     *   data: {
     *     // ... data to create a Users
     *   }
     * })
     * 
     */
    create<T extends usersCreateArgs>(args: SelectSubset<T, usersCreateArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {usersCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const users = await prisma.users.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends usersCreateManyArgs>(args?: SelectSubset<T, usersCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Users.
     * @param {usersDeleteArgs} args - Arguments to delete one Users.
     * @example
     * // Delete one Users
     * const Users = await prisma.users.delete({
     *   where: {
     *     // ... filter to delete one Users
     *   }
     * })
     * 
     */
    delete<T extends usersDeleteArgs>(args: SelectSubset<T, usersDeleteArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Users.
     * @param {usersUpdateArgs} args - Arguments to update one Users.
     * @example
     * // Update one Users
     * const users = await prisma.users.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends usersUpdateArgs>(args: SelectSubset<T, usersUpdateArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {usersDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.users.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends usersDeleteManyArgs>(args?: SelectSubset<T, usersDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends usersUpdateManyArgs>(args: SelectSubset<T, usersUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Users.
     * @param {usersUpsertArgs} args - Arguments to update or create a Users.
     * @example
     * // Update or create a Users
     * const users = await prisma.users.upsert({
     *   create: {
     *     // ... data to create a Users
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Users we want to update
     *   }
     * })
     */
    upsert<T extends usersUpsertArgs>(args: SelectSubset<T, usersUpsertArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.users.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends usersCountArgs>(
      args?: Subset<T, usersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsersAggregateArgs>(args: Subset<T, UsersAggregateArgs>): Prisma.PrismaPromise<GetUsersAggregateType<T>>

    /**
     * Group by Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends usersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: usersGroupByArgs['orderBy'] }
        : { orderBy?: usersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, usersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the users model
   */
  readonly fields: usersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for users.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__usersClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    cases<T extends users$casesArgs<ExtArgs> = {}>(args?: Subset<T, users$casesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$casesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the users model
   */
  interface usersFieldRefs {
    readonly id_user: FieldRef<"users", 'Int'>
    readonly username: FieldRef<"users", 'String'>
    readonly password_hash: FieldRef<"users", 'String'>
    readonly full_name: FieldRef<"users", 'String'>
    readonly email: FieldRef<"users", 'String'>
    readonly created_at: FieldRef<"users", 'DateTime'>
    readonly updated_at: FieldRef<"users", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * users findUnique
   */
  export type usersFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where: usersWhereUniqueInput
  }

  /**
   * users findUniqueOrThrow
   */
  export type usersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where: usersWhereUniqueInput
  }

  /**
   * users findFirst
   */
  export type usersFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * users findFirstOrThrow
   */
  export type usersFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * users findMany
   */
  export type usersFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * users create
   */
  export type usersCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * The data needed to create a users.
     */
    data: XOR<usersCreateInput, usersUncheckedCreateInput>
  }

  /**
   * users createMany
   */
  export type usersCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many users.
     */
    data: usersCreateManyInput | usersCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * users update
   */
  export type usersUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * The data needed to update a users.
     */
    data: XOR<usersUpdateInput, usersUncheckedUpdateInput>
    /**
     * Choose, which users to update.
     */
    where: usersWhereUniqueInput
  }

  /**
   * users updateMany
   */
  export type usersUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update users.
     */
    data: XOR<usersUpdateManyMutationInput, usersUncheckedUpdateManyInput>
    /**
     * Filter which users to update
     */
    where?: usersWhereInput
    /**
     * Limit how many users to update.
     */
    limit?: number
  }

  /**
   * users upsert
   */
  export type usersUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * The filter to search for the users to update in case it exists.
     */
    where: usersWhereUniqueInput
    /**
     * In case the users found by the `where` argument doesn't exist, create a new users with this data.
     */
    create: XOR<usersCreateInput, usersUncheckedCreateInput>
    /**
     * In case the users was found with the provided `where` argument, update it with this data.
     */
    update: XOR<usersUpdateInput, usersUncheckedUpdateInput>
  }

  /**
   * users delete
   */
  export type usersDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter which users to delete.
     */
    where: usersWhereUniqueInput
  }

  /**
   * users deleteMany
   */
  export type usersDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which users to delete
     */
    where?: usersWhereInput
    /**
     * Limit how many users to delete.
     */
    limit?: number
  }

  /**
   * users.cases
   */
  export type users$casesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cases
     */
    select?: casesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the cases
     */
    omit?: casesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: casesInclude<ExtArgs> | null
    where?: casesWhereInput
    orderBy?: casesOrderByWithRelationInput | casesOrderByWithRelationInput[]
    cursor?: casesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CasesScalarFieldEnum | CasesScalarFieldEnum[]
  }

  /**
   * users without action
   */
  export type usersDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const CasesScalarFieldEnum: {
    id_cases: 'id_cases',
    case_uuid: 'case_uuid',
    case_number: 'case_number',
    id_client: 'id_client',
    case_author: 'case_author',
    case_name: 'case_name',
    case_type: 'case_type',
    case_description: 'case_description',
    created_at: 'created_at',
    updated_at: 'updated_at',
    is_deleted: 'is_deleted',
    deleted_at: 'deleted_at'
  };

  export type CasesScalarFieldEnum = (typeof CasesScalarFieldEnum)[keyof typeof CasesScalarFieldEnum]


  export const ClientsScalarFieldEnum: {
    id_client: 'id_client',
    client_uuid: 'client_uuid',
    client_code: 'client_code',
    nama_client: 'nama_client',
    badan_usaha: 'badan_usaha',
    telp: 'telp',
    alamat: 'alamat',
    npwp: 'npwp',
    nkp: 'nkp',
    keterangan: 'keterangan',
    created_at: 'created_at',
    updated_at: 'updated_at',
    is_deleted: 'is_deleted',
    deleted_at: 'deleted_at'
  };

  export type ClientsScalarFieldEnum = (typeof ClientsScalarFieldEnum)[keyof typeof ClientsScalarFieldEnum]


  export const ConsultsScalarFieldEnum: {
    id_consults: 'id_consults',
    consult_uuid: 'consult_uuid',
    consult_code: 'consult_code',
    id_cases: 'id_cases',
    tujuan_consult: 'tujuan_consult',
    keterangan_consult: 'keterangan_consult',
    hasil_consult: 'hasil_consult',
    konsultan_consult: 'konsultan_consult',
    consult_date: 'consult_date',
    created_at: 'created_at',
    updated_at: 'updated_at',
    is_deleted: 'is_deleted',
    deleted_at: 'deleted_at'
  };

  export type ConsultsScalarFieldEnum = (typeof ConsultsScalarFieldEnum)[keyof typeof ConsultsScalarFieldEnum]


  export const UsersScalarFieldEnum: {
    id_user: 'id_user',
    username: 'username',
    password_hash: 'password_hash',
    full_name: 'full_name',
    email: 'email',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type UsersScalarFieldEnum = (typeof UsersScalarFieldEnum)[keyof typeof UsersScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const casesOrderByRelevanceFieldEnum: {
    case_uuid: 'case_uuid',
    case_number: 'case_number',
    case_name: 'case_name',
    case_type: 'case_type',
    case_description: 'case_description'
  };

  export type casesOrderByRelevanceFieldEnum = (typeof casesOrderByRelevanceFieldEnum)[keyof typeof casesOrderByRelevanceFieldEnum]


  export const clientsOrderByRelevanceFieldEnum: {
    client_uuid: 'client_uuid',
    client_code: 'client_code',
    nama_client: 'nama_client',
    badan_usaha: 'badan_usaha',
    telp: 'telp',
    alamat: 'alamat',
    npwp: 'npwp',
    nkp: 'nkp',
    keterangan: 'keterangan'
  };

  export type clientsOrderByRelevanceFieldEnum = (typeof clientsOrderByRelevanceFieldEnum)[keyof typeof clientsOrderByRelevanceFieldEnum]


  export const consultsOrderByRelevanceFieldEnum: {
    consult_uuid: 'consult_uuid',
    consult_code: 'consult_code',
    tujuan_consult: 'tujuan_consult',
    keterangan_consult: 'keterangan_consult',
    hasil_consult: 'hasil_consult',
    konsultan_consult: 'konsultan_consult'
  };

  export type consultsOrderByRelevanceFieldEnum = (typeof consultsOrderByRelevanceFieldEnum)[keyof typeof consultsOrderByRelevanceFieldEnum]


  export const usersOrderByRelevanceFieldEnum: {
    username: 'username',
    password_hash: 'password_hash',
    full_name: 'full_name',
    email: 'email'
  };

  export type usersOrderByRelevanceFieldEnum = (typeof usersOrderByRelevanceFieldEnum)[keyof typeof usersOrderByRelevanceFieldEnum]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type casesWhereInput = {
    AND?: casesWhereInput | casesWhereInput[]
    OR?: casesWhereInput[]
    NOT?: casesWhereInput | casesWhereInput[]
    id_cases?: IntFilter<"cases"> | number
    case_uuid?: StringFilter<"cases"> | string
    case_number?: StringNullableFilter<"cases"> | string | null
    id_client?: IntFilter<"cases"> | number
    case_author?: IntNullableFilter<"cases"> | number | null
    case_name?: StringFilter<"cases"> | string
    case_type?: StringNullableFilter<"cases"> | string | null
    case_description?: StringNullableFilter<"cases"> | string | null
    created_at?: DateTimeNullableFilter<"cases"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"cases"> | Date | string | null
    is_deleted?: BoolNullableFilter<"cases"> | boolean | null
    deleted_at?: DateTimeNullableFilter<"cases"> | Date | string | null
    clients?: XOR<ClientsScalarRelationFilter, clientsWhereInput>
    users?: XOR<UsersNullableScalarRelationFilter, usersWhereInput> | null
    consults?: ConsultsListRelationFilter
  }

  export type casesOrderByWithRelationInput = {
    id_cases?: SortOrder
    case_uuid?: SortOrder
    case_number?: SortOrderInput | SortOrder
    id_client?: SortOrder
    case_author?: SortOrderInput | SortOrder
    case_name?: SortOrder
    case_type?: SortOrderInput | SortOrder
    case_description?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    is_deleted?: SortOrderInput | SortOrder
    deleted_at?: SortOrderInput | SortOrder
    clients?: clientsOrderByWithRelationInput
    users?: usersOrderByWithRelationInput
    consults?: consultsOrderByRelationAggregateInput
    _relevance?: casesOrderByRelevanceInput
  }

  export type casesWhereUniqueInput = Prisma.AtLeast<{
    id_cases?: number
    case_number?: string
    AND?: casesWhereInput | casesWhereInput[]
    OR?: casesWhereInput[]
    NOT?: casesWhereInput | casesWhereInput[]
    case_uuid?: StringFilter<"cases"> | string
    id_client?: IntFilter<"cases"> | number
    case_author?: IntNullableFilter<"cases"> | number | null
    case_name?: StringFilter<"cases"> | string
    case_type?: StringNullableFilter<"cases"> | string | null
    case_description?: StringNullableFilter<"cases"> | string | null
    created_at?: DateTimeNullableFilter<"cases"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"cases"> | Date | string | null
    is_deleted?: BoolNullableFilter<"cases"> | boolean | null
    deleted_at?: DateTimeNullableFilter<"cases"> | Date | string | null
    clients?: XOR<ClientsScalarRelationFilter, clientsWhereInput>
    users?: XOR<UsersNullableScalarRelationFilter, usersWhereInput> | null
    consults?: ConsultsListRelationFilter
  }, "id_cases" | "case_number">

  export type casesOrderByWithAggregationInput = {
    id_cases?: SortOrder
    case_uuid?: SortOrder
    case_number?: SortOrderInput | SortOrder
    id_client?: SortOrder
    case_author?: SortOrderInput | SortOrder
    case_name?: SortOrder
    case_type?: SortOrderInput | SortOrder
    case_description?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    is_deleted?: SortOrderInput | SortOrder
    deleted_at?: SortOrderInput | SortOrder
    _count?: casesCountOrderByAggregateInput
    _avg?: casesAvgOrderByAggregateInput
    _max?: casesMaxOrderByAggregateInput
    _min?: casesMinOrderByAggregateInput
    _sum?: casesSumOrderByAggregateInput
  }

  export type casesScalarWhereWithAggregatesInput = {
    AND?: casesScalarWhereWithAggregatesInput | casesScalarWhereWithAggregatesInput[]
    OR?: casesScalarWhereWithAggregatesInput[]
    NOT?: casesScalarWhereWithAggregatesInput | casesScalarWhereWithAggregatesInput[]
    id_cases?: IntWithAggregatesFilter<"cases"> | number
    case_uuid?: StringWithAggregatesFilter<"cases"> | string
    case_number?: StringNullableWithAggregatesFilter<"cases"> | string | null
    id_client?: IntWithAggregatesFilter<"cases"> | number
    case_author?: IntNullableWithAggregatesFilter<"cases"> | number | null
    case_name?: StringWithAggregatesFilter<"cases"> | string
    case_type?: StringNullableWithAggregatesFilter<"cases"> | string | null
    case_description?: StringNullableWithAggregatesFilter<"cases"> | string | null
    created_at?: DateTimeNullableWithAggregatesFilter<"cases"> | Date | string | null
    updated_at?: DateTimeNullableWithAggregatesFilter<"cases"> | Date | string | null
    is_deleted?: BoolNullableWithAggregatesFilter<"cases"> | boolean | null
    deleted_at?: DateTimeNullableWithAggregatesFilter<"cases"> | Date | string | null
  }

  export type clientsWhereInput = {
    AND?: clientsWhereInput | clientsWhereInput[]
    OR?: clientsWhereInput[]
    NOT?: clientsWhereInput | clientsWhereInput[]
    id_client?: IntFilter<"clients"> | number
    client_uuid?: StringFilter<"clients"> | string
    client_code?: StringNullableFilter<"clients"> | string | null
    nama_client?: StringFilter<"clients"> | string
    badan_usaha?: StringNullableFilter<"clients"> | string | null
    telp?: StringNullableFilter<"clients"> | string | null
    alamat?: StringNullableFilter<"clients"> | string | null
    npwp?: StringNullableFilter<"clients"> | string | null
    nkp?: StringNullableFilter<"clients"> | string | null
    keterangan?: StringNullableFilter<"clients"> | string | null
    created_at?: DateTimeNullableFilter<"clients"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"clients"> | Date | string | null
    is_deleted?: BoolNullableFilter<"clients"> | boolean | null
    deleted_at?: DateTimeNullableFilter<"clients"> | Date | string | null
    cases?: CasesListRelationFilter
  }

  export type clientsOrderByWithRelationInput = {
    id_client?: SortOrder
    client_uuid?: SortOrder
    client_code?: SortOrderInput | SortOrder
    nama_client?: SortOrder
    badan_usaha?: SortOrderInput | SortOrder
    telp?: SortOrderInput | SortOrder
    alamat?: SortOrderInput | SortOrder
    npwp?: SortOrderInput | SortOrder
    nkp?: SortOrderInput | SortOrder
    keterangan?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    is_deleted?: SortOrderInput | SortOrder
    deleted_at?: SortOrderInput | SortOrder
    cases?: casesOrderByRelationAggregateInput
    _relevance?: clientsOrderByRelevanceInput
  }

  export type clientsWhereUniqueInput = Prisma.AtLeast<{
    id_client?: number
    client_code?: string
    AND?: clientsWhereInput | clientsWhereInput[]
    OR?: clientsWhereInput[]
    NOT?: clientsWhereInput | clientsWhereInput[]
    client_uuid?: StringFilter<"clients"> | string
    nama_client?: StringFilter<"clients"> | string
    badan_usaha?: StringNullableFilter<"clients"> | string | null
    telp?: StringNullableFilter<"clients"> | string | null
    alamat?: StringNullableFilter<"clients"> | string | null
    npwp?: StringNullableFilter<"clients"> | string | null
    nkp?: StringNullableFilter<"clients"> | string | null
    keterangan?: StringNullableFilter<"clients"> | string | null
    created_at?: DateTimeNullableFilter<"clients"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"clients"> | Date | string | null
    is_deleted?: BoolNullableFilter<"clients"> | boolean | null
    deleted_at?: DateTimeNullableFilter<"clients"> | Date | string | null
    cases?: CasesListRelationFilter
  }, "id_client" | "client_code">

  export type clientsOrderByWithAggregationInput = {
    id_client?: SortOrder
    client_uuid?: SortOrder
    client_code?: SortOrderInput | SortOrder
    nama_client?: SortOrder
    badan_usaha?: SortOrderInput | SortOrder
    telp?: SortOrderInput | SortOrder
    alamat?: SortOrderInput | SortOrder
    npwp?: SortOrderInput | SortOrder
    nkp?: SortOrderInput | SortOrder
    keterangan?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    is_deleted?: SortOrderInput | SortOrder
    deleted_at?: SortOrderInput | SortOrder
    _count?: clientsCountOrderByAggregateInput
    _avg?: clientsAvgOrderByAggregateInput
    _max?: clientsMaxOrderByAggregateInput
    _min?: clientsMinOrderByAggregateInput
    _sum?: clientsSumOrderByAggregateInput
  }

  export type clientsScalarWhereWithAggregatesInput = {
    AND?: clientsScalarWhereWithAggregatesInput | clientsScalarWhereWithAggregatesInput[]
    OR?: clientsScalarWhereWithAggregatesInput[]
    NOT?: clientsScalarWhereWithAggregatesInput | clientsScalarWhereWithAggregatesInput[]
    id_client?: IntWithAggregatesFilter<"clients"> | number
    client_uuid?: StringWithAggregatesFilter<"clients"> | string
    client_code?: StringNullableWithAggregatesFilter<"clients"> | string | null
    nama_client?: StringWithAggregatesFilter<"clients"> | string
    badan_usaha?: StringNullableWithAggregatesFilter<"clients"> | string | null
    telp?: StringNullableWithAggregatesFilter<"clients"> | string | null
    alamat?: StringNullableWithAggregatesFilter<"clients"> | string | null
    npwp?: StringNullableWithAggregatesFilter<"clients"> | string | null
    nkp?: StringNullableWithAggregatesFilter<"clients"> | string | null
    keterangan?: StringNullableWithAggregatesFilter<"clients"> | string | null
    created_at?: DateTimeNullableWithAggregatesFilter<"clients"> | Date | string | null
    updated_at?: DateTimeNullableWithAggregatesFilter<"clients"> | Date | string | null
    is_deleted?: BoolNullableWithAggregatesFilter<"clients"> | boolean | null
    deleted_at?: DateTimeNullableWithAggregatesFilter<"clients"> | Date | string | null
  }

  export type consultsWhereInput = {
    AND?: consultsWhereInput | consultsWhereInput[]
    OR?: consultsWhereInput[]
    NOT?: consultsWhereInput | consultsWhereInput[]
    id_consults?: IntFilter<"consults"> | number
    consult_uuid?: StringFilter<"consults"> | string
    consult_code?: StringNullableFilter<"consults"> | string | null
    id_cases?: IntFilter<"consults"> | number
    tujuan_consult?: StringNullableFilter<"consults"> | string | null
    keterangan_consult?: StringNullableFilter<"consults"> | string | null
    hasil_consult?: StringNullableFilter<"consults"> | string | null
    konsultan_consult?: StringNullableFilter<"consults"> | string | null
    consult_date?: DateTimeNullableFilter<"consults"> | Date | string | null
    created_at?: DateTimeNullableFilter<"consults"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"consults"> | Date | string | null
    is_deleted?: BoolNullableFilter<"consults"> | boolean | null
    deleted_at?: DateTimeNullableFilter<"consults"> | Date | string | null
    cases?: XOR<CasesScalarRelationFilter, casesWhereInput>
  }

  export type consultsOrderByWithRelationInput = {
    id_consults?: SortOrder
    consult_uuid?: SortOrder
    consult_code?: SortOrderInput | SortOrder
    id_cases?: SortOrder
    tujuan_consult?: SortOrderInput | SortOrder
    keterangan_consult?: SortOrderInput | SortOrder
    hasil_consult?: SortOrderInput | SortOrder
    konsultan_consult?: SortOrderInput | SortOrder
    consult_date?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    is_deleted?: SortOrderInput | SortOrder
    deleted_at?: SortOrderInput | SortOrder
    cases?: casesOrderByWithRelationInput
    _relevance?: consultsOrderByRelevanceInput
  }

  export type consultsWhereUniqueInput = Prisma.AtLeast<{
    id_consults?: number
    consult_code?: string
    AND?: consultsWhereInput | consultsWhereInput[]
    OR?: consultsWhereInput[]
    NOT?: consultsWhereInput | consultsWhereInput[]
    consult_uuid?: StringFilter<"consults"> | string
    id_cases?: IntFilter<"consults"> | number
    tujuan_consult?: StringNullableFilter<"consults"> | string | null
    keterangan_consult?: StringNullableFilter<"consults"> | string | null
    hasil_consult?: StringNullableFilter<"consults"> | string | null
    konsultan_consult?: StringNullableFilter<"consults"> | string | null
    consult_date?: DateTimeNullableFilter<"consults"> | Date | string | null
    created_at?: DateTimeNullableFilter<"consults"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"consults"> | Date | string | null
    is_deleted?: BoolNullableFilter<"consults"> | boolean | null
    deleted_at?: DateTimeNullableFilter<"consults"> | Date | string | null
    cases?: XOR<CasesScalarRelationFilter, casesWhereInput>
  }, "id_consults" | "consult_code">

  export type consultsOrderByWithAggregationInput = {
    id_consults?: SortOrder
    consult_uuid?: SortOrder
    consult_code?: SortOrderInput | SortOrder
    id_cases?: SortOrder
    tujuan_consult?: SortOrderInput | SortOrder
    keterangan_consult?: SortOrderInput | SortOrder
    hasil_consult?: SortOrderInput | SortOrder
    konsultan_consult?: SortOrderInput | SortOrder
    consult_date?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    is_deleted?: SortOrderInput | SortOrder
    deleted_at?: SortOrderInput | SortOrder
    _count?: consultsCountOrderByAggregateInput
    _avg?: consultsAvgOrderByAggregateInput
    _max?: consultsMaxOrderByAggregateInput
    _min?: consultsMinOrderByAggregateInput
    _sum?: consultsSumOrderByAggregateInput
  }

  export type consultsScalarWhereWithAggregatesInput = {
    AND?: consultsScalarWhereWithAggregatesInput | consultsScalarWhereWithAggregatesInput[]
    OR?: consultsScalarWhereWithAggregatesInput[]
    NOT?: consultsScalarWhereWithAggregatesInput | consultsScalarWhereWithAggregatesInput[]
    id_consults?: IntWithAggregatesFilter<"consults"> | number
    consult_uuid?: StringWithAggregatesFilter<"consults"> | string
    consult_code?: StringNullableWithAggregatesFilter<"consults"> | string | null
    id_cases?: IntWithAggregatesFilter<"consults"> | number
    tujuan_consult?: StringNullableWithAggregatesFilter<"consults"> | string | null
    keterangan_consult?: StringNullableWithAggregatesFilter<"consults"> | string | null
    hasil_consult?: StringNullableWithAggregatesFilter<"consults"> | string | null
    konsultan_consult?: StringNullableWithAggregatesFilter<"consults"> | string | null
    consult_date?: DateTimeNullableWithAggregatesFilter<"consults"> | Date | string | null
    created_at?: DateTimeNullableWithAggregatesFilter<"consults"> | Date | string | null
    updated_at?: DateTimeNullableWithAggregatesFilter<"consults"> | Date | string | null
    is_deleted?: BoolNullableWithAggregatesFilter<"consults"> | boolean | null
    deleted_at?: DateTimeNullableWithAggregatesFilter<"consults"> | Date | string | null
  }

  export type usersWhereInput = {
    AND?: usersWhereInput | usersWhereInput[]
    OR?: usersWhereInput[]
    NOT?: usersWhereInput | usersWhereInput[]
    id_user?: IntFilter<"users"> | number
    username?: StringFilter<"users"> | string
    password_hash?: StringFilter<"users"> | string
    full_name?: StringNullableFilter<"users"> | string | null
    email?: StringNullableFilter<"users"> | string | null
    created_at?: DateTimeNullableFilter<"users"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"users"> | Date | string | null
    cases?: CasesListRelationFilter
  }

  export type usersOrderByWithRelationInput = {
    id_user?: SortOrder
    username?: SortOrder
    password_hash?: SortOrder
    full_name?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    cases?: casesOrderByRelationAggregateInput
    _relevance?: usersOrderByRelevanceInput
  }

  export type usersWhereUniqueInput = Prisma.AtLeast<{
    id_user?: number
    username?: string
    AND?: usersWhereInput | usersWhereInput[]
    OR?: usersWhereInput[]
    NOT?: usersWhereInput | usersWhereInput[]
    password_hash?: StringFilter<"users"> | string
    full_name?: StringNullableFilter<"users"> | string | null
    email?: StringNullableFilter<"users"> | string | null
    created_at?: DateTimeNullableFilter<"users"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"users"> | Date | string | null
    cases?: CasesListRelationFilter
  }, "id_user" | "username">

  export type usersOrderByWithAggregationInput = {
    id_user?: SortOrder
    username?: SortOrder
    password_hash?: SortOrder
    full_name?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    _count?: usersCountOrderByAggregateInput
    _avg?: usersAvgOrderByAggregateInput
    _max?: usersMaxOrderByAggregateInput
    _min?: usersMinOrderByAggregateInput
    _sum?: usersSumOrderByAggregateInput
  }

  export type usersScalarWhereWithAggregatesInput = {
    AND?: usersScalarWhereWithAggregatesInput | usersScalarWhereWithAggregatesInput[]
    OR?: usersScalarWhereWithAggregatesInput[]
    NOT?: usersScalarWhereWithAggregatesInput | usersScalarWhereWithAggregatesInput[]
    id_user?: IntWithAggregatesFilter<"users"> | number
    username?: StringWithAggregatesFilter<"users"> | string
    password_hash?: StringWithAggregatesFilter<"users"> | string
    full_name?: StringNullableWithAggregatesFilter<"users"> | string | null
    email?: StringNullableWithAggregatesFilter<"users"> | string | null
    created_at?: DateTimeNullableWithAggregatesFilter<"users"> | Date | string | null
    updated_at?: DateTimeNullableWithAggregatesFilter<"users"> | Date | string | null
  }

  export type casesCreateInput = {
    case_uuid?: string
    case_number?: string | null
    case_name: string
    case_type?: string | null
    case_description?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    is_deleted?: boolean | null
    deleted_at?: Date | string | null
    clients: clientsCreateNestedOneWithoutCasesInput
    users?: usersCreateNestedOneWithoutCasesInput
    consults?: consultsCreateNestedManyWithoutCasesInput
  }

  export type casesUncheckedCreateInput = {
    id_cases?: number
    case_uuid?: string
    case_number?: string | null
    id_client: number
    case_author?: number | null
    case_name: string
    case_type?: string | null
    case_description?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    is_deleted?: boolean | null
    deleted_at?: Date | string | null
    consults?: consultsUncheckedCreateNestedManyWithoutCasesInput
  }

  export type casesUpdateInput = {
    case_uuid?: StringFieldUpdateOperationsInput | string
    case_number?: NullableStringFieldUpdateOperationsInput | string | null
    case_name?: StringFieldUpdateOperationsInput | string
    case_type?: NullableStringFieldUpdateOperationsInput | string | null
    case_description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    is_deleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    clients?: clientsUpdateOneRequiredWithoutCasesNestedInput
    users?: usersUpdateOneWithoutCasesNestedInput
    consults?: consultsUpdateManyWithoutCasesNestedInput
  }

  export type casesUncheckedUpdateInput = {
    id_cases?: IntFieldUpdateOperationsInput | number
    case_uuid?: StringFieldUpdateOperationsInput | string
    case_number?: NullableStringFieldUpdateOperationsInput | string | null
    id_client?: IntFieldUpdateOperationsInput | number
    case_author?: NullableIntFieldUpdateOperationsInput | number | null
    case_name?: StringFieldUpdateOperationsInput | string
    case_type?: NullableStringFieldUpdateOperationsInput | string | null
    case_description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    is_deleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    consults?: consultsUncheckedUpdateManyWithoutCasesNestedInput
  }

  export type casesCreateManyInput = {
    id_cases?: number
    case_uuid?: string
    case_number?: string | null
    id_client: number
    case_author?: number | null
    case_name: string
    case_type?: string | null
    case_description?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    is_deleted?: boolean | null
    deleted_at?: Date | string | null
  }

  export type casesUpdateManyMutationInput = {
    case_uuid?: StringFieldUpdateOperationsInput | string
    case_number?: NullableStringFieldUpdateOperationsInput | string | null
    case_name?: StringFieldUpdateOperationsInput | string
    case_type?: NullableStringFieldUpdateOperationsInput | string | null
    case_description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    is_deleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type casesUncheckedUpdateManyInput = {
    id_cases?: IntFieldUpdateOperationsInput | number
    case_uuid?: StringFieldUpdateOperationsInput | string
    case_number?: NullableStringFieldUpdateOperationsInput | string | null
    id_client?: IntFieldUpdateOperationsInput | number
    case_author?: NullableIntFieldUpdateOperationsInput | number | null
    case_name?: StringFieldUpdateOperationsInput | string
    case_type?: NullableStringFieldUpdateOperationsInput | string | null
    case_description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    is_deleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type clientsCreateInput = {
    client_uuid?: string
    client_code?: string | null
    nama_client: string
    badan_usaha?: string | null
    telp?: string | null
    alamat?: string | null
    npwp?: string | null
    nkp?: string | null
    keterangan?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    is_deleted?: boolean | null
    deleted_at?: Date | string | null
    cases?: casesCreateNestedManyWithoutClientsInput
  }

  export type clientsUncheckedCreateInput = {
    id_client?: number
    client_uuid?: string
    client_code?: string | null
    nama_client: string
    badan_usaha?: string | null
    telp?: string | null
    alamat?: string | null
    npwp?: string | null
    nkp?: string | null
    keterangan?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    is_deleted?: boolean | null
    deleted_at?: Date | string | null
    cases?: casesUncheckedCreateNestedManyWithoutClientsInput
  }

  export type clientsUpdateInput = {
    client_uuid?: StringFieldUpdateOperationsInput | string
    client_code?: NullableStringFieldUpdateOperationsInput | string | null
    nama_client?: StringFieldUpdateOperationsInput | string
    badan_usaha?: NullableStringFieldUpdateOperationsInput | string | null
    telp?: NullableStringFieldUpdateOperationsInput | string | null
    alamat?: NullableStringFieldUpdateOperationsInput | string | null
    npwp?: NullableStringFieldUpdateOperationsInput | string | null
    nkp?: NullableStringFieldUpdateOperationsInput | string | null
    keterangan?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    is_deleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cases?: casesUpdateManyWithoutClientsNestedInput
  }

  export type clientsUncheckedUpdateInput = {
    id_client?: IntFieldUpdateOperationsInput | number
    client_uuid?: StringFieldUpdateOperationsInput | string
    client_code?: NullableStringFieldUpdateOperationsInput | string | null
    nama_client?: StringFieldUpdateOperationsInput | string
    badan_usaha?: NullableStringFieldUpdateOperationsInput | string | null
    telp?: NullableStringFieldUpdateOperationsInput | string | null
    alamat?: NullableStringFieldUpdateOperationsInput | string | null
    npwp?: NullableStringFieldUpdateOperationsInput | string | null
    nkp?: NullableStringFieldUpdateOperationsInput | string | null
    keterangan?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    is_deleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cases?: casesUncheckedUpdateManyWithoutClientsNestedInput
  }

  export type clientsCreateManyInput = {
    id_client?: number
    client_uuid?: string
    client_code?: string | null
    nama_client: string
    badan_usaha?: string | null
    telp?: string | null
    alamat?: string | null
    npwp?: string | null
    nkp?: string | null
    keterangan?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    is_deleted?: boolean | null
    deleted_at?: Date | string | null
  }

  export type clientsUpdateManyMutationInput = {
    client_uuid?: StringFieldUpdateOperationsInput | string
    client_code?: NullableStringFieldUpdateOperationsInput | string | null
    nama_client?: StringFieldUpdateOperationsInput | string
    badan_usaha?: NullableStringFieldUpdateOperationsInput | string | null
    telp?: NullableStringFieldUpdateOperationsInput | string | null
    alamat?: NullableStringFieldUpdateOperationsInput | string | null
    npwp?: NullableStringFieldUpdateOperationsInput | string | null
    nkp?: NullableStringFieldUpdateOperationsInput | string | null
    keterangan?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    is_deleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type clientsUncheckedUpdateManyInput = {
    id_client?: IntFieldUpdateOperationsInput | number
    client_uuid?: StringFieldUpdateOperationsInput | string
    client_code?: NullableStringFieldUpdateOperationsInput | string | null
    nama_client?: StringFieldUpdateOperationsInput | string
    badan_usaha?: NullableStringFieldUpdateOperationsInput | string | null
    telp?: NullableStringFieldUpdateOperationsInput | string | null
    alamat?: NullableStringFieldUpdateOperationsInput | string | null
    npwp?: NullableStringFieldUpdateOperationsInput | string | null
    nkp?: NullableStringFieldUpdateOperationsInput | string | null
    keterangan?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    is_deleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type consultsCreateInput = {
    consult_uuid?: string
    consult_code?: string | null
    tujuan_consult?: string | null
    keterangan_consult?: string | null
    hasil_consult?: string | null
    konsultan_consult?: string | null
    consult_date?: Date | string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    is_deleted?: boolean | null
    deleted_at?: Date | string | null
    cases: casesCreateNestedOneWithoutConsultsInput
  }

  export type consultsUncheckedCreateInput = {
    id_consults?: number
    consult_uuid?: string
    consult_code?: string | null
    id_cases: number
    tujuan_consult?: string | null
    keterangan_consult?: string | null
    hasil_consult?: string | null
    konsultan_consult?: string | null
    consult_date?: Date | string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    is_deleted?: boolean | null
    deleted_at?: Date | string | null
  }

  export type consultsUpdateInput = {
    consult_uuid?: StringFieldUpdateOperationsInput | string
    consult_code?: NullableStringFieldUpdateOperationsInput | string | null
    tujuan_consult?: NullableStringFieldUpdateOperationsInput | string | null
    keterangan_consult?: NullableStringFieldUpdateOperationsInput | string | null
    hasil_consult?: NullableStringFieldUpdateOperationsInput | string | null
    konsultan_consult?: NullableStringFieldUpdateOperationsInput | string | null
    consult_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    is_deleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cases?: casesUpdateOneRequiredWithoutConsultsNestedInput
  }

  export type consultsUncheckedUpdateInput = {
    id_consults?: IntFieldUpdateOperationsInput | number
    consult_uuid?: StringFieldUpdateOperationsInput | string
    consult_code?: NullableStringFieldUpdateOperationsInput | string | null
    id_cases?: IntFieldUpdateOperationsInput | number
    tujuan_consult?: NullableStringFieldUpdateOperationsInput | string | null
    keterangan_consult?: NullableStringFieldUpdateOperationsInput | string | null
    hasil_consult?: NullableStringFieldUpdateOperationsInput | string | null
    konsultan_consult?: NullableStringFieldUpdateOperationsInput | string | null
    consult_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    is_deleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type consultsCreateManyInput = {
    id_consults?: number
    consult_uuid?: string
    consult_code?: string | null
    id_cases: number
    tujuan_consult?: string | null
    keterangan_consult?: string | null
    hasil_consult?: string | null
    konsultan_consult?: string | null
    consult_date?: Date | string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    is_deleted?: boolean | null
    deleted_at?: Date | string | null
  }

  export type consultsUpdateManyMutationInput = {
    consult_uuid?: StringFieldUpdateOperationsInput | string
    consult_code?: NullableStringFieldUpdateOperationsInput | string | null
    tujuan_consult?: NullableStringFieldUpdateOperationsInput | string | null
    keterangan_consult?: NullableStringFieldUpdateOperationsInput | string | null
    hasil_consult?: NullableStringFieldUpdateOperationsInput | string | null
    konsultan_consult?: NullableStringFieldUpdateOperationsInput | string | null
    consult_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    is_deleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type consultsUncheckedUpdateManyInput = {
    id_consults?: IntFieldUpdateOperationsInput | number
    consult_uuid?: StringFieldUpdateOperationsInput | string
    consult_code?: NullableStringFieldUpdateOperationsInput | string | null
    id_cases?: IntFieldUpdateOperationsInput | number
    tujuan_consult?: NullableStringFieldUpdateOperationsInput | string | null
    keterangan_consult?: NullableStringFieldUpdateOperationsInput | string | null
    hasil_consult?: NullableStringFieldUpdateOperationsInput | string | null
    konsultan_consult?: NullableStringFieldUpdateOperationsInput | string | null
    consult_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    is_deleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type usersCreateInput = {
    username: string
    password_hash: string
    full_name?: string | null
    email?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    cases?: casesCreateNestedManyWithoutUsersInput
  }

  export type usersUncheckedCreateInput = {
    id_user?: number
    username: string
    password_hash: string
    full_name?: string | null
    email?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    cases?: casesUncheckedCreateNestedManyWithoutUsersInput
  }

  export type usersUpdateInput = {
    username?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    full_name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cases?: casesUpdateManyWithoutUsersNestedInput
  }

  export type usersUncheckedUpdateInput = {
    id_user?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    full_name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cases?: casesUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type usersCreateManyInput = {
    id_user?: number
    username: string
    password_hash: string
    full_name?: string | null
    email?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type usersUpdateManyMutationInput = {
    username?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    full_name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type usersUncheckedUpdateManyInput = {
    id_user?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    full_name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type BoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type ClientsScalarRelationFilter = {
    is?: clientsWhereInput
    isNot?: clientsWhereInput
  }

  export type UsersNullableScalarRelationFilter = {
    is?: usersWhereInput | null
    isNot?: usersWhereInput | null
  }

  export type ConsultsListRelationFilter = {
    every?: consultsWhereInput
    some?: consultsWhereInput
    none?: consultsWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type consultsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type casesOrderByRelevanceInput = {
    fields: casesOrderByRelevanceFieldEnum | casesOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type casesCountOrderByAggregateInput = {
    id_cases?: SortOrder
    case_uuid?: SortOrder
    case_number?: SortOrder
    id_client?: SortOrder
    case_author?: SortOrder
    case_name?: SortOrder
    case_type?: SortOrder
    case_description?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    is_deleted?: SortOrder
    deleted_at?: SortOrder
  }

  export type casesAvgOrderByAggregateInput = {
    id_cases?: SortOrder
    id_client?: SortOrder
    case_author?: SortOrder
  }

  export type casesMaxOrderByAggregateInput = {
    id_cases?: SortOrder
    case_uuid?: SortOrder
    case_number?: SortOrder
    id_client?: SortOrder
    case_author?: SortOrder
    case_name?: SortOrder
    case_type?: SortOrder
    case_description?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    is_deleted?: SortOrder
    deleted_at?: SortOrder
  }

  export type casesMinOrderByAggregateInput = {
    id_cases?: SortOrder
    case_uuid?: SortOrder
    case_number?: SortOrder
    id_client?: SortOrder
    case_author?: SortOrder
    case_name?: SortOrder
    case_type?: SortOrder
    case_description?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    is_deleted?: SortOrder
    deleted_at?: SortOrder
  }

  export type casesSumOrderByAggregateInput = {
    id_cases?: SortOrder
    id_client?: SortOrder
    case_author?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type BoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type CasesListRelationFilter = {
    every?: casesWhereInput
    some?: casesWhereInput
    none?: casesWhereInput
  }

  export type casesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type clientsOrderByRelevanceInput = {
    fields: clientsOrderByRelevanceFieldEnum | clientsOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type clientsCountOrderByAggregateInput = {
    id_client?: SortOrder
    client_uuid?: SortOrder
    client_code?: SortOrder
    nama_client?: SortOrder
    badan_usaha?: SortOrder
    telp?: SortOrder
    alamat?: SortOrder
    npwp?: SortOrder
    nkp?: SortOrder
    keterangan?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    is_deleted?: SortOrder
    deleted_at?: SortOrder
  }

  export type clientsAvgOrderByAggregateInput = {
    id_client?: SortOrder
  }

  export type clientsMaxOrderByAggregateInput = {
    id_client?: SortOrder
    client_uuid?: SortOrder
    client_code?: SortOrder
    nama_client?: SortOrder
    badan_usaha?: SortOrder
    telp?: SortOrder
    alamat?: SortOrder
    npwp?: SortOrder
    nkp?: SortOrder
    keterangan?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    is_deleted?: SortOrder
    deleted_at?: SortOrder
  }

  export type clientsMinOrderByAggregateInput = {
    id_client?: SortOrder
    client_uuid?: SortOrder
    client_code?: SortOrder
    nama_client?: SortOrder
    badan_usaha?: SortOrder
    telp?: SortOrder
    alamat?: SortOrder
    npwp?: SortOrder
    nkp?: SortOrder
    keterangan?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    is_deleted?: SortOrder
    deleted_at?: SortOrder
  }

  export type clientsSumOrderByAggregateInput = {
    id_client?: SortOrder
  }

  export type CasesScalarRelationFilter = {
    is?: casesWhereInput
    isNot?: casesWhereInput
  }

  export type consultsOrderByRelevanceInput = {
    fields: consultsOrderByRelevanceFieldEnum | consultsOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type consultsCountOrderByAggregateInput = {
    id_consults?: SortOrder
    consult_uuid?: SortOrder
    consult_code?: SortOrder
    id_cases?: SortOrder
    tujuan_consult?: SortOrder
    keterangan_consult?: SortOrder
    hasil_consult?: SortOrder
    konsultan_consult?: SortOrder
    consult_date?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    is_deleted?: SortOrder
    deleted_at?: SortOrder
  }

  export type consultsAvgOrderByAggregateInput = {
    id_consults?: SortOrder
    id_cases?: SortOrder
  }

  export type consultsMaxOrderByAggregateInput = {
    id_consults?: SortOrder
    consult_uuid?: SortOrder
    consult_code?: SortOrder
    id_cases?: SortOrder
    tujuan_consult?: SortOrder
    keterangan_consult?: SortOrder
    hasil_consult?: SortOrder
    konsultan_consult?: SortOrder
    consult_date?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    is_deleted?: SortOrder
    deleted_at?: SortOrder
  }

  export type consultsMinOrderByAggregateInput = {
    id_consults?: SortOrder
    consult_uuid?: SortOrder
    consult_code?: SortOrder
    id_cases?: SortOrder
    tujuan_consult?: SortOrder
    keterangan_consult?: SortOrder
    hasil_consult?: SortOrder
    konsultan_consult?: SortOrder
    consult_date?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    is_deleted?: SortOrder
    deleted_at?: SortOrder
  }

  export type consultsSumOrderByAggregateInput = {
    id_consults?: SortOrder
    id_cases?: SortOrder
  }

  export type usersOrderByRelevanceInput = {
    fields: usersOrderByRelevanceFieldEnum | usersOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type usersCountOrderByAggregateInput = {
    id_user?: SortOrder
    username?: SortOrder
    password_hash?: SortOrder
    full_name?: SortOrder
    email?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type usersAvgOrderByAggregateInput = {
    id_user?: SortOrder
  }

  export type usersMaxOrderByAggregateInput = {
    id_user?: SortOrder
    username?: SortOrder
    password_hash?: SortOrder
    full_name?: SortOrder
    email?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type usersMinOrderByAggregateInput = {
    id_user?: SortOrder
    username?: SortOrder
    password_hash?: SortOrder
    full_name?: SortOrder
    email?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type usersSumOrderByAggregateInput = {
    id_user?: SortOrder
  }

  export type clientsCreateNestedOneWithoutCasesInput = {
    create?: XOR<clientsCreateWithoutCasesInput, clientsUncheckedCreateWithoutCasesInput>
    connectOrCreate?: clientsCreateOrConnectWithoutCasesInput
    connect?: clientsWhereUniqueInput
  }

  export type usersCreateNestedOneWithoutCasesInput = {
    create?: XOR<usersCreateWithoutCasesInput, usersUncheckedCreateWithoutCasesInput>
    connectOrCreate?: usersCreateOrConnectWithoutCasesInput
    connect?: usersWhereUniqueInput
  }

  export type consultsCreateNestedManyWithoutCasesInput = {
    create?: XOR<consultsCreateWithoutCasesInput, consultsUncheckedCreateWithoutCasesInput> | consultsCreateWithoutCasesInput[] | consultsUncheckedCreateWithoutCasesInput[]
    connectOrCreate?: consultsCreateOrConnectWithoutCasesInput | consultsCreateOrConnectWithoutCasesInput[]
    createMany?: consultsCreateManyCasesInputEnvelope
    connect?: consultsWhereUniqueInput | consultsWhereUniqueInput[]
  }

  export type consultsUncheckedCreateNestedManyWithoutCasesInput = {
    create?: XOR<consultsCreateWithoutCasesInput, consultsUncheckedCreateWithoutCasesInput> | consultsCreateWithoutCasesInput[] | consultsUncheckedCreateWithoutCasesInput[]
    connectOrCreate?: consultsCreateOrConnectWithoutCasesInput | consultsCreateOrConnectWithoutCasesInput[]
    createMany?: consultsCreateManyCasesInputEnvelope
    connect?: consultsWhereUniqueInput | consultsWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type clientsUpdateOneRequiredWithoutCasesNestedInput = {
    create?: XOR<clientsCreateWithoutCasesInput, clientsUncheckedCreateWithoutCasesInput>
    connectOrCreate?: clientsCreateOrConnectWithoutCasesInput
    upsert?: clientsUpsertWithoutCasesInput
    connect?: clientsWhereUniqueInput
    update?: XOR<XOR<clientsUpdateToOneWithWhereWithoutCasesInput, clientsUpdateWithoutCasesInput>, clientsUncheckedUpdateWithoutCasesInput>
  }

  export type usersUpdateOneWithoutCasesNestedInput = {
    create?: XOR<usersCreateWithoutCasesInput, usersUncheckedCreateWithoutCasesInput>
    connectOrCreate?: usersCreateOrConnectWithoutCasesInput
    upsert?: usersUpsertWithoutCasesInput
    disconnect?: usersWhereInput | boolean
    delete?: usersWhereInput | boolean
    connect?: usersWhereUniqueInput
    update?: XOR<XOR<usersUpdateToOneWithWhereWithoutCasesInput, usersUpdateWithoutCasesInput>, usersUncheckedUpdateWithoutCasesInput>
  }

  export type consultsUpdateManyWithoutCasesNestedInput = {
    create?: XOR<consultsCreateWithoutCasesInput, consultsUncheckedCreateWithoutCasesInput> | consultsCreateWithoutCasesInput[] | consultsUncheckedCreateWithoutCasesInput[]
    connectOrCreate?: consultsCreateOrConnectWithoutCasesInput | consultsCreateOrConnectWithoutCasesInput[]
    upsert?: consultsUpsertWithWhereUniqueWithoutCasesInput | consultsUpsertWithWhereUniqueWithoutCasesInput[]
    createMany?: consultsCreateManyCasesInputEnvelope
    set?: consultsWhereUniqueInput | consultsWhereUniqueInput[]
    disconnect?: consultsWhereUniqueInput | consultsWhereUniqueInput[]
    delete?: consultsWhereUniqueInput | consultsWhereUniqueInput[]
    connect?: consultsWhereUniqueInput | consultsWhereUniqueInput[]
    update?: consultsUpdateWithWhereUniqueWithoutCasesInput | consultsUpdateWithWhereUniqueWithoutCasesInput[]
    updateMany?: consultsUpdateManyWithWhereWithoutCasesInput | consultsUpdateManyWithWhereWithoutCasesInput[]
    deleteMany?: consultsScalarWhereInput | consultsScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type consultsUncheckedUpdateManyWithoutCasesNestedInput = {
    create?: XOR<consultsCreateWithoutCasesInput, consultsUncheckedCreateWithoutCasesInput> | consultsCreateWithoutCasesInput[] | consultsUncheckedCreateWithoutCasesInput[]
    connectOrCreate?: consultsCreateOrConnectWithoutCasesInput | consultsCreateOrConnectWithoutCasesInput[]
    upsert?: consultsUpsertWithWhereUniqueWithoutCasesInput | consultsUpsertWithWhereUniqueWithoutCasesInput[]
    createMany?: consultsCreateManyCasesInputEnvelope
    set?: consultsWhereUniqueInput | consultsWhereUniqueInput[]
    disconnect?: consultsWhereUniqueInput | consultsWhereUniqueInput[]
    delete?: consultsWhereUniqueInput | consultsWhereUniqueInput[]
    connect?: consultsWhereUniqueInput | consultsWhereUniqueInput[]
    update?: consultsUpdateWithWhereUniqueWithoutCasesInput | consultsUpdateWithWhereUniqueWithoutCasesInput[]
    updateMany?: consultsUpdateManyWithWhereWithoutCasesInput | consultsUpdateManyWithWhereWithoutCasesInput[]
    deleteMany?: consultsScalarWhereInput | consultsScalarWhereInput[]
  }

  export type casesCreateNestedManyWithoutClientsInput = {
    create?: XOR<casesCreateWithoutClientsInput, casesUncheckedCreateWithoutClientsInput> | casesCreateWithoutClientsInput[] | casesUncheckedCreateWithoutClientsInput[]
    connectOrCreate?: casesCreateOrConnectWithoutClientsInput | casesCreateOrConnectWithoutClientsInput[]
    createMany?: casesCreateManyClientsInputEnvelope
    connect?: casesWhereUniqueInput | casesWhereUniqueInput[]
  }

  export type casesUncheckedCreateNestedManyWithoutClientsInput = {
    create?: XOR<casesCreateWithoutClientsInput, casesUncheckedCreateWithoutClientsInput> | casesCreateWithoutClientsInput[] | casesUncheckedCreateWithoutClientsInput[]
    connectOrCreate?: casesCreateOrConnectWithoutClientsInput | casesCreateOrConnectWithoutClientsInput[]
    createMany?: casesCreateManyClientsInputEnvelope
    connect?: casesWhereUniqueInput | casesWhereUniqueInput[]
  }

  export type casesUpdateManyWithoutClientsNestedInput = {
    create?: XOR<casesCreateWithoutClientsInput, casesUncheckedCreateWithoutClientsInput> | casesCreateWithoutClientsInput[] | casesUncheckedCreateWithoutClientsInput[]
    connectOrCreate?: casesCreateOrConnectWithoutClientsInput | casesCreateOrConnectWithoutClientsInput[]
    upsert?: casesUpsertWithWhereUniqueWithoutClientsInput | casesUpsertWithWhereUniqueWithoutClientsInput[]
    createMany?: casesCreateManyClientsInputEnvelope
    set?: casesWhereUniqueInput | casesWhereUniqueInput[]
    disconnect?: casesWhereUniqueInput | casesWhereUniqueInput[]
    delete?: casesWhereUniqueInput | casesWhereUniqueInput[]
    connect?: casesWhereUniqueInput | casesWhereUniqueInput[]
    update?: casesUpdateWithWhereUniqueWithoutClientsInput | casesUpdateWithWhereUniqueWithoutClientsInput[]
    updateMany?: casesUpdateManyWithWhereWithoutClientsInput | casesUpdateManyWithWhereWithoutClientsInput[]
    deleteMany?: casesScalarWhereInput | casesScalarWhereInput[]
  }

  export type casesUncheckedUpdateManyWithoutClientsNestedInput = {
    create?: XOR<casesCreateWithoutClientsInput, casesUncheckedCreateWithoutClientsInput> | casesCreateWithoutClientsInput[] | casesUncheckedCreateWithoutClientsInput[]
    connectOrCreate?: casesCreateOrConnectWithoutClientsInput | casesCreateOrConnectWithoutClientsInput[]
    upsert?: casesUpsertWithWhereUniqueWithoutClientsInput | casesUpsertWithWhereUniqueWithoutClientsInput[]
    createMany?: casesCreateManyClientsInputEnvelope
    set?: casesWhereUniqueInput | casesWhereUniqueInput[]
    disconnect?: casesWhereUniqueInput | casesWhereUniqueInput[]
    delete?: casesWhereUniqueInput | casesWhereUniqueInput[]
    connect?: casesWhereUniqueInput | casesWhereUniqueInput[]
    update?: casesUpdateWithWhereUniqueWithoutClientsInput | casesUpdateWithWhereUniqueWithoutClientsInput[]
    updateMany?: casesUpdateManyWithWhereWithoutClientsInput | casesUpdateManyWithWhereWithoutClientsInput[]
    deleteMany?: casesScalarWhereInput | casesScalarWhereInput[]
  }

  export type casesCreateNestedOneWithoutConsultsInput = {
    create?: XOR<casesCreateWithoutConsultsInput, casesUncheckedCreateWithoutConsultsInput>
    connectOrCreate?: casesCreateOrConnectWithoutConsultsInput
    connect?: casesWhereUniqueInput
  }

  export type casesUpdateOneRequiredWithoutConsultsNestedInput = {
    create?: XOR<casesCreateWithoutConsultsInput, casesUncheckedCreateWithoutConsultsInput>
    connectOrCreate?: casesCreateOrConnectWithoutConsultsInput
    upsert?: casesUpsertWithoutConsultsInput
    connect?: casesWhereUniqueInput
    update?: XOR<XOR<casesUpdateToOneWithWhereWithoutConsultsInput, casesUpdateWithoutConsultsInput>, casesUncheckedUpdateWithoutConsultsInput>
  }

  export type casesCreateNestedManyWithoutUsersInput = {
    create?: XOR<casesCreateWithoutUsersInput, casesUncheckedCreateWithoutUsersInput> | casesCreateWithoutUsersInput[] | casesUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: casesCreateOrConnectWithoutUsersInput | casesCreateOrConnectWithoutUsersInput[]
    createMany?: casesCreateManyUsersInputEnvelope
    connect?: casesWhereUniqueInput | casesWhereUniqueInput[]
  }

  export type casesUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<casesCreateWithoutUsersInput, casesUncheckedCreateWithoutUsersInput> | casesCreateWithoutUsersInput[] | casesUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: casesCreateOrConnectWithoutUsersInput | casesCreateOrConnectWithoutUsersInput[]
    createMany?: casesCreateManyUsersInputEnvelope
    connect?: casesWhereUniqueInput | casesWhereUniqueInput[]
  }

  export type casesUpdateManyWithoutUsersNestedInput = {
    create?: XOR<casesCreateWithoutUsersInput, casesUncheckedCreateWithoutUsersInput> | casesCreateWithoutUsersInput[] | casesUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: casesCreateOrConnectWithoutUsersInput | casesCreateOrConnectWithoutUsersInput[]
    upsert?: casesUpsertWithWhereUniqueWithoutUsersInput | casesUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: casesCreateManyUsersInputEnvelope
    set?: casesWhereUniqueInput | casesWhereUniqueInput[]
    disconnect?: casesWhereUniqueInput | casesWhereUniqueInput[]
    delete?: casesWhereUniqueInput | casesWhereUniqueInput[]
    connect?: casesWhereUniqueInput | casesWhereUniqueInput[]
    update?: casesUpdateWithWhereUniqueWithoutUsersInput | casesUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: casesUpdateManyWithWhereWithoutUsersInput | casesUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: casesScalarWhereInput | casesScalarWhereInput[]
  }

  export type casesUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<casesCreateWithoutUsersInput, casesUncheckedCreateWithoutUsersInput> | casesCreateWithoutUsersInput[] | casesUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: casesCreateOrConnectWithoutUsersInput | casesCreateOrConnectWithoutUsersInput[]
    upsert?: casesUpsertWithWhereUniqueWithoutUsersInput | casesUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: casesCreateManyUsersInputEnvelope
    set?: casesWhereUniqueInput | casesWhereUniqueInput[]
    disconnect?: casesWhereUniqueInput | casesWhereUniqueInput[]
    delete?: casesWhereUniqueInput | casesWhereUniqueInput[]
    connect?: casesWhereUniqueInput | casesWhereUniqueInput[]
    update?: casesUpdateWithWhereUniqueWithoutUsersInput | casesUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: casesUpdateManyWithWhereWithoutUsersInput | casesUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: casesScalarWhereInput | casesScalarWhereInput[]
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedBoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedBoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type clientsCreateWithoutCasesInput = {
    client_uuid?: string
    client_code?: string | null
    nama_client: string
    badan_usaha?: string | null
    telp?: string | null
    alamat?: string | null
    npwp?: string | null
    nkp?: string | null
    keterangan?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    is_deleted?: boolean | null
    deleted_at?: Date | string | null
  }

  export type clientsUncheckedCreateWithoutCasesInput = {
    id_client?: number
    client_uuid?: string
    client_code?: string | null
    nama_client: string
    badan_usaha?: string | null
    telp?: string | null
    alamat?: string | null
    npwp?: string | null
    nkp?: string | null
    keterangan?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    is_deleted?: boolean | null
    deleted_at?: Date | string | null
  }

  export type clientsCreateOrConnectWithoutCasesInput = {
    where: clientsWhereUniqueInput
    create: XOR<clientsCreateWithoutCasesInput, clientsUncheckedCreateWithoutCasesInput>
  }

  export type usersCreateWithoutCasesInput = {
    username: string
    password_hash: string
    full_name?: string | null
    email?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type usersUncheckedCreateWithoutCasesInput = {
    id_user?: number
    username: string
    password_hash: string
    full_name?: string | null
    email?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type usersCreateOrConnectWithoutCasesInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutCasesInput, usersUncheckedCreateWithoutCasesInput>
  }

  export type consultsCreateWithoutCasesInput = {
    consult_uuid?: string
    consult_code?: string | null
    tujuan_consult?: string | null
    keterangan_consult?: string | null
    hasil_consult?: string | null
    konsultan_consult?: string | null
    consult_date?: Date | string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    is_deleted?: boolean | null
    deleted_at?: Date | string | null
  }

  export type consultsUncheckedCreateWithoutCasesInput = {
    id_consults?: number
    consult_uuid?: string
    consult_code?: string | null
    tujuan_consult?: string | null
    keterangan_consult?: string | null
    hasil_consult?: string | null
    konsultan_consult?: string | null
    consult_date?: Date | string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    is_deleted?: boolean | null
    deleted_at?: Date | string | null
  }

  export type consultsCreateOrConnectWithoutCasesInput = {
    where: consultsWhereUniqueInput
    create: XOR<consultsCreateWithoutCasesInput, consultsUncheckedCreateWithoutCasesInput>
  }

  export type consultsCreateManyCasesInputEnvelope = {
    data: consultsCreateManyCasesInput | consultsCreateManyCasesInput[]
    skipDuplicates?: boolean
  }

  export type clientsUpsertWithoutCasesInput = {
    update: XOR<clientsUpdateWithoutCasesInput, clientsUncheckedUpdateWithoutCasesInput>
    create: XOR<clientsCreateWithoutCasesInput, clientsUncheckedCreateWithoutCasesInput>
    where?: clientsWhereInput
  }

  export type clientsUpdateToOneWithWhereWithoutCasesInput = {
    where?: clientsWhereInput
    data: XOR<clientsUpdateWithoutCasesInput, clientsUncheckedUpdateWithoutCasesInput>
  }

  export type clientsUpdateWithoutCasesInput = {
    client_uuid?: StringFieldUpdateOperationsInput | string
    client_code?: NullableStringFieldUpdateOperationsInput | string | null
    nama_client?: StringFieldUpdateOperationsInput | string
    badan_usaha?: NullableStringFieldUpdateOperationsInput | string | null
    telp?: NullableStringFieldUpdateOperationsInput | string | null
    alamat?: NullableStringFieldUpdateOperationsInput | string | null
    npwp?: NullableStringFieldUpdateOperationsInput | string | null
    nkp?: NullableStringFieldUpdateOperationsInput | string | null
    keterangan?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    is_deleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type clientsUncheckedUpdateWithoutCasesInput = {
    id_client?: IntFieldUpdateOperationsInput | number
    client_uuid?: StringFieldUpdateOperationsInput | string
    client_code?: NullableStringFieldUpdateOperationsInput | string | null
    nama_client?: StringFieldUpdateOperationsInput | string
    badan_usaha?: NullableStringFieldUpdateOperationsInput | string | null
    telp?: NullableStringFieldUpdateOperationsInput | string | null
    alamat?: NullableStringFieldUpdateOperationsInput | string | null
    npwp?: NullableStringFieldUpdateOperationsInput | string | null
    nkp?: NullableStringFieldUpdateOperationsInput | string | null
    keterangan?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    is_deleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type usersUpsertWithoutCasesInput = {
    update: XOR<usersUpdateWithoutCasesInput, usersUncheckedUpdateWithoutCasesInput>
    create: XOR<usersCreateWithoutCasesInput, usersUncheckedCreateWithoutCasesInput>
    where?: usersWhereInput
  }

  export type usersUpdateToOneWithWhereWithoutCasesInput = {
    where?: usersWhereInput
    data: XOR<usersUpdateWithoutCasesInput, usersUncheckedUpdateWithoutCasesInput>
  }

  export type usersUpdateWithoutCasesInput = {
    username?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    full_name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type usersUncheckedUpdateWithoutCasesInput = {
    id_user?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password_hash?: StringFieldUpdateOperationsInput | string
    full_name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type consultsUpsertWithWhereUniqueWithoutCasesInput = {
    where: consultsWhereUniqueInput
    update: XOR<consultsUpdateWithoutCasesInput, consultsUncheckedUpdateWithoutCasesInput>
    create: XOR<consultsCreateWithoutCasesInput, consultsUncheckedCreateWithoutCasesInput>
  }

  export type consultsUpdateWithWhereUniqueWithoutCasesInput = {
    where: consultsWhereUniqueInput
    data: XOR<consultsUpdateWithoutCasesInput, consultsUncheckedUpdateWithoutCasesInput>
  }

  export type consultsUpdateManyWithWhereWithoutCasesInput = {
    where: consultsScalarWhereInput
    data: XOR<consultsUpdateManyMutationInput, consultsUncheckedUpdateManyWithoutCasesInput>
  }

  export type consultsScalarWhereInput = {
    AND?: consultsScalarWhereInput | consultsScalarWhereInput[]
    OR?: consultsScalarWhereInput[]
    NOT?: consultsScalarWhereInput | consultsScalarWhereInput[]
    id_consults?: IntFilter<"consults"> | number
    consult_uuid?: StringFilter<"consults"> | string
    consult_code?: StringNullableFilter<"consults"> | string | null
    id_cases?: IntFilter<"consults"> | number
    tujuan_consult?: StringNullableFilter<"consults"> | string | null
    keterangan_consult?: StringNullableFilter<"consults"> | string | null
    hasil_consult?: StringNullableFilter<"consults"> | string | null
    konsultan_consult?: StringNullableFilter<"consults"> | string | null
    consult_date?: DateTimeNullableFilter<"consults"> | Date | string | null
    created_at?: DateTimeNullableFilter<"consults"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"consults"> | Date | string | null
    is_deleted?: BoolNullableFilter<"consults"> | boolean | null
    deleted_at?: DateTimeNullableFilter<"consults"> | Date | string | null
  }

  export type casesCreateWithoutClientsInput = {
    case_uuid?: string
    case_number?: string | null
    case_name: string
    case_type?: string | null
    case_description?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    is_deleted?: boolean | null
    deleted_at?: Date | string | null
    users?: usersCreateNestedOneWithoutCasesInput
    consults?: consultsCreateNestedManyWithoutCasesInput
  }

  export type casesUncheckedCreateWithoutClientsInput = {
    id_cases?: number
    case_uuid?: string
    case_number?: string | null
    case_author?: number | null
    case_name: string
    case_type?: string | null
    case_description?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    is_deleted?: boolean | null
    deleted_at?: Date | string | null
    consults?: consultsUncheckedCreateNestedManyWithoutCasesInput
  }

  export type casesCreateOrConnectWithoutClientsInput = {
    where: casesWhereUniqueInput
    create: XOR<casesCreateWithoutClientsInput, casesUncheckedCreateWithoutClientsInput>
  }

  export type casesCreateManyClientsInputEnvelope = {
    data: casesCreateManyClientsInput | casesCreateManyClientsInput[]
    skipDuplicates?: boolean
  }

  export type casesUpsertWithWhereUniqueWithoutClientsInput = {
    where: casesWhereUniqueInput
    update: XOR<casesUpdateWithoutClientsInput, casesUncheckedUpdateWithoutClientsInput>
    create: XOR<casesCreateWithoutClientsInput, casesUncheckedCreateWithoutClientsInput>
  }

  export type casesUpdateWithWhereUniqueWithoutClientsInput = {
    where: casesWhereUniqueInput
    data: XOR<casesUpdateWithoutClientsInput, casesUncheckedUpdateWithoutClientsInput>
  }

  export type casesUpdateManyWithWhereWithoutClientsInput = {
    where: casesScalarWhereInput
    data: XOR<casesUpdateManyMutationInput, casesUncheckedUpdateManyWithoutClientsInput>
  }

  export type casesScalarWhereInput = {
    AND?: casesScalarWhereInput | casesScalarWhereInput[]
    OR?: casesScalarWhereInput[]
    NOT?: casesScalarWhereInput | casesScalarWhereInput[]
    id_cases?: IntFilter<"cases"> | number
    case_uuid?: StringFilter<"cases"> | string
    case_number?: StringNullableFilter<"cases"> | string | null
    id_client?: IntFilter<"cases"> | number
    case_author?: IntNullableFilter<"cases"> | number | null
    case_name?: StringFilter<"cases"> | string
    case_type?: StringNullableFilter<"cases"> | string | null
    case_description?: StringNullableFilter<"cases"> | string | null
    created_at?: DateTimeNullableFilter<"cases"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"cases"> | Date | string | null
    is_deleted?: BoolNullableFilter<"cases"> | boolean | null
    deleted_at?: DateTimeNullableFilter<"cases"> | Date | string | null
  }

  export type casesCreateWithoutConsultsInput = {
    case_uuid?: string
    case_number?: string | null
    case_name: string
    case_type?: string | null
    case_description?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    is_deleted?: boolean | null
    deleted_at?: Date | string | null
    clients: clientsCreateNestedOneWithoutCasesInput
    users?: usersCreateNestedOneWithoutCasesInput
  }

  export type casesUncheckedCreateWithoutConsultsInput = {
    id_cases?: number
    case_uuid?: string
    case_number?: string | null
    id_client: number
    case_author?: number | null
    case_name: string
    case_type?: string | null
    case_description?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    is_deleted?: boolean | null
    deleted_at?: Date | string | null
  }

  export type casesCreateOrConnectWithoutConsultsInput = {
    where: casesWhereUniqueInput
    create: XOR<casesCreateWithoutConsultsInput, casesUncheckedCreateWithoutConsultsInput>
  }

  export type casesUpsertWithoutConsultsInput = {
    update: XOR<casesUpdateWithoutConsultsInput, casesUncheckedUpdateWithoutConsultsInput>
    create: XOR<casesCreateWithoutConsultsInput, casesUncheckedCreateWithoutConsultsInput>
    where?: casesWhereInput
  }

  export type casesUpdateToOneWithWhereWithoutConsultsInput = {
    where?: casesWhereInput
    data: XOR<casesUpdateWithoutConsultsInput, casesUncheckedUpdateWithoutConsultsInput>
  }

  export type casesUpdateWithoutConsultsInput = {
    case_uuid?: StringFieldUpdateOperationsInput | string
    case_number?: NullableStringFieldUpdateOperationsInput | string | null
    case_name?: StringFieldUpdateOperationsInput | string
    case_type?: NullableStringFieldUpdateOperationsInput | string | null
    case_description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    is_deleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    clients?: clientsUpdateOneRequiredWithoutCasesNestedInput
    users?: usersUpdateOneWithoutCasesNestedInput
  }

  export type casesUncheckedUpdateWithoutConsultsInput = {
    id_cases?: IntFieldUpdateOperationsInput | number
    case_uuid?: StringFieldUpdateOperationsInput | string
    case_number?: NullableStringFieldUpdateOperationsInput | string | null
    id_client?: IntFieldUpdateOperationsInput | number
    case_author?: NullableIntFieldUpdateOperationsInput | number | null
    case_name?: StringFieldUpdateOperationsInput | string
    case_type?: NullableStringFieldUpdateOperationsInput | string | null
    case_description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    is_deleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type casesCreateWithoutUsersInput = {
    case_uuid?: string
    case_number?: string | null
    case_name: string
    case_type?: string | null
    case_description?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    is_deleted?: boolean | null
    deleted_at?: Date | string | null
    clients: clientsCreateNestedOneWithoutCasesInput
    consults?: consultsCreateNestedManyWithoutCasesInput
  }

  export type casesUncheckedCreateWithoutUsersInput = {
    id_cases?: number
    case_uuid?: string
    case_number?: string | null
    id_client: number
    case_name: string
    case_type?: string | null
    case_description?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    is_deleted?: boolean | null
    deleted_at?: Date | string | null
    consults?: consultsUncheckedCreateNestedManyWithoutCasesInput
  }

  export type casesCreateOrConnectWithoutUsersInput = {
    where: casesWhereUniqueInput
    create: XOR<casesCreateWithoutUsersInput, casesUncheckedCreateWithoutUsersInput>
  }

  export type casesCreateManyUsersInputEnvelope = {
    data: casesCreateManyUsersInput | casesCreateManyUsersInput[]
    skipDuplicates?: boolean
  }

  export type casesUpsertWithWhereUniqueWithoutUsersInput = {
    where: casesWhereUniqueInput
    update: XOR<casesUpdateWithoutUsersInput, casesUncheckedUpdateWithoutUsersInput>
    create: XOR<casesCreateWithoutUsersInput, casesUncheckedCreateWithoutUsersInput>
  }

  export type casesUpdateWithWhereUniqueWithoutUsersInput = {
    where: casesWhereUniqueInput
    data: XOR<casesUpdateWithoutUsersInput, casesUncheckedUpdateWithoutUsersInput>
  }

  export type casesUpdateManyWithWhereWithoutUsersInput = {
    where: casesScalarWhereInput
    data: XOR<casesUpdateManyMutationInput, casesUncheckedUpdateManyWithoutUsersInput>
  }

  export type consultsCreateManyCasesInput = {
    id_consults?: number
    consult_uuid?: string
    consult_code?: string | null
    tujuan_consult?: string | null
    keterangan_consult?: string | null
    hasil_consult?: string | null
    konsultan_consult?: string | null
    consult_date?: Date | string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    is_deleted?: boolean | null
    deleted_at?: Date | string | null
  }

  export type consultsUpdateWithoutCasesInput = {
    consult_uuid?: StringFieldUpdateOperationsInput | string
    consult_code?: NullableStringFieldUpdateOperationsInput | string | null
    tujuan_consult?: NullableStringFieldUpdateOperationsInput | string | null
    keterangan_consult?: NullableStringFieldUpdateOperationsInput | string | null
    hasil_consult?: NullableStringFieldUpdateOperationsInput | string | null
    konsultan_consult?: NullableStringFieldUpdateOperationsInput | string | null
    consult_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    is_deleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type consultsUncheckedUpdateWithoutCasesInput = {
    id_consults?: IntFieldUpdateOperationsInput | number
    consult_uuid?: StringFieldUpdateOperationsInput | string
    consult_code?: NullableStringFieldUpdateOperationsInput | string | null
    tujuan_consult?: NullableStringFieldUpdateOperationsInput | string | null
    keterangan_consult?: NullableStringFieldUpdateOperationsInput | string | null
    hasil_consult?: NullableStringFieldUpdateOperationsInput | string | null
    konsultan_consult?: NullableStringFieldUpdateOperationsInput | string | null
    consult_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    is_deleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type consultsUncheckedUpdateManyWithoutCasesInput = {
    id_consults?: IntFieldUpdateOperationsInput | number
    consult_uuid?: StringFieldUpdateOperationsInput | string
    consult_code?: NullableStringFieldUpdateOperationsInput | string | null
    tujuan_consult?: NullableStringFieldUpdateOperationsInput | string | null
    keterangan_consult?: NullableStringFieldUpdateOperationsInput | string | null
    hasil_consult?: NullableStringFieldUpdateOperationsInput | string | null
    konsultan_consult?: NullableStringFieldUpdateOperationsInput | string | null
    consult_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    is_deleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type casesCreateManyClientsInput = {
    id_cases?: number
    case_uuid?: string
    case_number?: string | null
    case_author?: number | null
    case_name: string
    case_type?: string | null
    case_description?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    is_deleted?: boolean | null
    deleted_at?: Date | string | null
  }

  export type casesUpdateWithoutClientsInput = {
    case_uuid?: StringFieldUpdateOperationsInput | string
    case_number?: NullableStringFieldUpdateOperationsInput | string | null
    case_name?: StringFieldUpdateOperationsInput | string
    case_type?: NullableStringFieldUpdateOperationsInput | string | null
    case_description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    is_deleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    users?: usersUpdateOneWithoutCasesNestedInput
    consults?: consultsUpdateManyWithoutCasesNestedInput
  }

  export type casesUncheckedUpdateWithoutClientsInput = {
    id_cases?: IntFieldUpdateOperationsInput | number
    case_uuid?: StringFieldUpdateOperationsInput | string
    case_number?: NullableStringFieldUpdateOperationsInput | string | null
    case_author?: NullableIntFieldUpdateOperationsInput | number | null
    case_name?: StringFieldUpdateOperationsInput | string
    case_type?: NullableStringFieldUpdateOperationsInput | string | null
    case_description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    is_deleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    consults?: consultsUncheckedUpdateManyWithoutCasesNestedInput
  }

  export type casesUncheckedUpdateManyWithoutClientsInput = {
    id_cases?: IntFieldUpdateOperationsInput | number
    case_uuid?: StringFieldUpdateOperationsInput | string
    case_number?: NullableStringFieldUpdateOperationsInput | string | null
    case_author?: NullableIntFieldUpdateOperationsInput | number | null
    case_name?: StringFieldUpdateOperationsInput | string
    case_type?: NullableStringFieldUpdateOperationsInput | string | null
    case_description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    is_deleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type casesCreateManyUsersInput = {
    id_cases?: number
    case_uuid?: string
    case_number?: string | null
    id_client: number
    case_name: string
    case_type?: string | null
    case_description?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    is_deleted?: boolean | null
    deleted_at?: Date | string | null
  }

  export type casesUpdateWithoutUsersInput = {
    case_uuid?: StringFieldUpdateOperationsInput | string
    case_number?: NullableStringFieldUpdateOperationsInput | string | null
    case_name?: StringFieldUpdateOperationsInput | string
    case_type?: NullableStringFieldUpdateOperationsInput | string | null
    case_description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    is_deleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    clients?: clientsUpdateOneRequiredWithoutCasesNestedInput
    consults?: consultsUpdateManyWithoutCasesNestedInput
  }

  export type casesUncheckedUpdateWithoutUsersInput = {
    id_cases?: IntFieldUpdateOperationsInput | number
    case_uuid?: StringFieldUpdateOperationsInput | string
    case_number?: NullableStringFieldUpdateOperationsInput | string | null
    id_client?: IntFieldUpdateOperationsInput | number
    case_name?: StringFieldUpdateOperationsInput | string
    case_type?: NullableStringFieldUpdateOperationsInput | string | null
    case_description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    is_deleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    consults?: consultsUncheckedUpdateManyWithoutCasesNestedInput
  }

  export type casesUncheckedUpdateManyWithoutUsersInput = {
    id_cases?: IntFieldUpdateOperationsInput | number
    case_uuid?: StringFieldUpdateOperationsInput | string
    case_number?: NullableStringFieldUpdateOperationsInput | string | null
    id_client?: IntFieldUpdateOperationsInput | number
    case_name?: StringFieldUpdateOperationsInput | string
    case_type?: NullableStringFieldUpdateOperationsInput | string | null
    case_description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    is_deleted?: NullableBoolFieldUpdateOperationsInput | boolean | null
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}